


//Обращение к сервису выполняется при помощи запросов с использование метода GET ( не POST) к URL следующего вида:

//http://localhost:8090/Agreement/hs/Status/Agreed?Idorder=Зн&IdUser=Зн
//http://localhost:8090/Agreement/hs/Status/NoAgreed?Idorder=Зн&IdUser=Зн
//http://localhost:8090/Agreement/hs/Status/Paid?Idorder=Зн&IdUser=Зн



//Рассмотрим, из чего состоит путь:

//http://localhost:8090/Agreement/ - путь публикации информационной базы,
//hs – обязательный сегмент пути, сообщающий серверу, что будет происходить работа с http-сервисами,
//Status –корневой URL http-сервиса,

//Agreed  или /NoAgreed или /Paid   - имя метода.
//?Idorder=Зн&IdUser=Зн – строка с параметрами запроса.



Функция ВызодМетодаGet(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	ИмяМетода = Запрос.ПараметрыURL["ИмяМетода"];
	
	Результат = ПараметрыИзЗапроса( Запрос);
	Заявка = Результат.Заявка;
	
	Если  Результат.Отказ Тогда
		Ответ = Новый HTTPСервисОтвет(405);
		htmlТекст=ПолучитьhtmlТекст(Результат.Отказ, Результат.Текст);
		Ответ.УстановитьТелоИзСтроки(htmlТекст) ;
		Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");//BSP-8 Ошибка кодировки
		Возврат Ответ;
		
	КонецЕсли;
	
	
	Если ИмяМетода = "Agreed" Тогда
						
		//\\++
		Если Заявка.разбивкапостатьям.количество() = 1 тогда
			//++Гаранин
			Если ЗначениеЗаполнено(Заявка.ВторойСогласователь) и НЕ Заявка.ПервыйСогласован Тогда
				ЗаявкаОбъект = Заявка.ПолучитьОбъект();
				ЗаявкаОбъект.ПервыйСогласован = Истина;
				ЗаявкаОбъект.Записать();
				Ответ= УстановитьСтатусВторой(Запрос, Заявка, Перечисления._СтатусыЗаявок.НаСогласовании);//++13.02 изменен статус с согласован на на согласовании
				Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8"); 
				
				Возврат Ответ;
			КонецЕсли;
			
			Ответ = УстановитьСтатус(Запрос, Заявка, Перечисления._СтатусыЗаявок.Согласован);
			//--
		Иначе
			Ответ = УстановитьСтатусыЗаявкиПострочно(Заявка, Результат.МассивСтрок);
		КонецЕсли;
		
		
	ИначеЕсли ИмяМетода = "NoAgreed" Тогда
		
		Ответ= УстановитьСтатус(Запрос,Заявка, Перечисления._СтатусыЗаявок.НеСогласован);	
		
		
	ИначеЕсли ИмяМетода = "Paid" Тогда
		
		Ответ= УстановитьСтатус(Запрос,Заявка, Перечисления._СтатусыЗаявок.Оплачено);	
		
	//BSP-8 Доработать, Перезвонить
	ИначеЕсли ИмяМетода = "Improve" Тогда
		
		Ответ= УстановитьСтатус(Запрос,Заявка, Перечисления._СтатусыЗаявок.Доработать, Результат.Комментарий);
	
	ИначеЕсли ИмяМетода = "ImproveComment" Тогда 

		Ответ = Новый HTTPСервисОтвет(200);
		htmlТекст ="<body>";
		htmlТекст =	htmlТекст + "<form name='impr' method='get' action='"+ Запрос.БазовыйURL + "/V1/Improve" +"'><h2>Комментарий</h2><input type='hidden' name='Idorder' value='"+ Результат.ИдЗаявка +"'></input>";
		htmlТекст =	htmlТекст +"<input type='hidden' name='hash' value='"+ Результат.КонтрольнаяСумма +"'></input>";
		htmlТекст =	htmlТекст +"<textarea id='comment' class='txtarea' name='comment' placeholder='Ваш комментарий:'></textarea><p>";
		htmlТекст =	htmlТекст +"<input type='submit'></input></p></form>";

		Если Результат.массивСтрок.Количество() > 0 тогда
			н = 0;
			Для каждого стр из Результат.МассивСтрок Цикл
				htmlТекст = htmlТекст + "<input type='str'" + строка(н)+"="+строка(стр.НомерСтроки) + "name='str' value=" +строка(стр.НомерСтроки) + ">";
				н=н+1;
			КонецЦикла;
		КонецЕсли;
		htmlТекст =	htmlТекст +"</body>";
					
		Ответ.УстановитьТелоИзСтроки(htmlТекст);
		
	ИначеЕсли ИмяМетода = "Call" Тогда
		
		Ответ= УстановитьСтатус(Запрос,Заявка, Перечисления._СтатусыЗаявок.Перезвонить);	
	//--	
		
	Иначе
		
		Ответ = Новый HTTPСервисОтвет(404);
		Текст ="Неизвестное имя метода! Допустимые методы: Agreed, NoAgreed, и Paid";
		htmlТекст=ПолучитьhtmlТекст(Истина, Текст);
		Ответ.УстановитьТелоИзСтроки(htmlТекст);
		
	КонецЕсли;                                                                                            
	
	
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8"); 
	
	Возврат Ответ;
	
	
КонецФункции

Функция УстановитьСтатусыЗаявкиПострочно(Заявка, МассивСтрок)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	
	Результат = УстановкаСтатусаПострочно(Заявка,МассивСтрок);
	Если  Результат.Отказ Тогда
		Ответ = Новый HTTPСервисОтвет(405);
		htmlТекст=ПолучитьhtmlТекст(Результат.Отказ, Результат.Текст);
		Ответ.УстановитьТелоИзСтроки(htmlТекст);	
	Иначе
		
		Текст = Результат.Текст; 
		СоздатьСообщениеИОтправить = Константы._СоздатьИсходящееПисьмоПриИзмененииСтатуса.Получить();
		Если СоздатьСообщениеИОтправить и Результат.НужноОтправитьСообщение Тогда
			//\\++
			Если Результат.Свойство("Контакты") тогда
				Для каждого контакт из Результат.Контакты Цикл
					 РезультатОтправки = _ОбщийМодульВызовСервера.СформироватьСообщениеПоЗаявкеНасервере(Заявка, Контакт);
				КонецЦикла;
			Иначе						
				РезультатОтправки = _ОбщийМодульВызовСервера.СформироватьСообщениеПоЗаявкеНасервере(Заявка,неопределено);	
			КонецЕсли;
			Если не РезультатОтправки.Отправлено  Тогда
				Текст = Текст+ Символы.ПС+  " Однако не удалось отправить сообщение." + Символы.ПС+ РезультатОтправки.ОписаниеОшибки ;
				_ОбщийМодульВызовСервера.СделатьЗаписьВМониторинг(Заявка, истина, Текст); ////НК
			Иначе
				_ОбщийМодульВызовСервера.СделатьЗаписьВМониторинг(Заявка, истина, "Сообщение отправлено"); ///НК
			КонецЕсли;	
			
		КонецЕсли;
		//htmlТекст=ПолучитьhtmlТекстВторой(Результат.Отказ, Текст);
		Ответ.УстановитьТелоИзСтроки(htmlТекст);
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции


Функция УстановитьСтатусВторой(Запрос,Заявка, Статус)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	Результат = ПроверкаУстановкаСтатуса(Заявка,Статус);
	Если  Результат.Отказ Тогда
		Ответ = Новый HTTPСервисОтвет(405);
		htmlТекст=ПолучитьhtmlТекст(Результат.Отказ, Результат.Текст);
		Ответ.УстановитьТелоИзСтроки(htmlТекст);	
		Возврат Ответ;
	КонецЕсли;
	
	Результат = УстановкаСтатусаВторой(Заявка,Статус);
	Если  Результат.Отказ Тогда
		Ответ = Новый HTTPСервисОтвет(405);
		htmlТекст=ПолучитьhtmlТекст(Результат.Отказ, Результат.Текст);
		Ответ.УстановитьТелоИзСтроки(htmlТекст);	
	Иначе
		
		Текст = Результат.Текст; 
		СоздатьСообщениеИОтправить = Константы._СоздатьИсходящееПисьмоПриИзмененииСтатуса.Получить();
		Если СоздатьСообщениеИОтправить Тогда
			
			РезультатОтправки = _ОбщийМодульВызовСервера.СформироватьСообщениеПоЗаявкеНасервере(Заявка);	
			
			Если не РезультатОтправки.Отправлено  Тогда
				Текст = Текст+ Символы.ПС+  " Однако не удалось отправить сообщение." + Символы.ПС+ РезультатОтправки.ОписаниеОшибки ;
				_ОбщийМодульВызовСервера.СделатьЗаписьВМониторинг(Заявка, истина, Текст); ////НК
			Иначе
				_ОбщийМодульВызовСервера.СделатьЗаписьВМониторинг(Заявка, истина, "Сообщение отправлено"); ///НК
			КонецЕсли;
			
			
			
		КонецЕсли;
		htmlТекст=ПолучитьhtmlТекстВторой(Результат.Отказ, Текст);
		Ответ.УстановитьТелоИзСтроки(htmlТекст);
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции


Функция УстановитьСтатус(Запрос,Заявка, Статус, Комментарий=Неопределено)
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	
	Результат = ПроверкаУстановкаСтатуса(Заявка,Статус);
	Если  Результат.Отказ Тогда
		Ответ = Новый HTTPСервисОтвет(405);
		htmlТекст=ПолучитьhtmlТекст(Результат.Отказ, Результат.Текст);
		Ответ.УстановитьТелоИзСтроки(htmlТекст);	
		Возврат Ответ;
		
	КонецЕсли;
	
	
	Результат = УстановкаСтатуса(Заявка,Статус, Комментарий);
	Если  Результат.Отказ Тогда
		Ответ = Новый HTTPСервисОтвет(405);
		htmlТекст=ПолучитьhtmlТекст(Результат.Отказ, Результат.Текст);
		Ответ.УстановитьТелоИзСтроки(htmlТекст);	
		
	Иначе
		
		Текст = Результат.Текст; 
		
		//////////////////////////
		СоздатьСообщениеИОтправить = Константы._СоздатьИсходящееПисьмоПриИзмененииСтатуса.Получить();
		
		Если СоздатьСообщениеИОтправить Тогда
			РезультатОтправки = _ОбщийМодульВызовСервера.СформироватьСообщениеПоЗаявкеНасервере(Заявка);	
			Если не РезультатОтправки.Отправлено  Тогда
				Текст = Текст+ Символы.ПС+  " Однако не удалось отправить сообщение." + Символы.ПС+ РезультатОтправки.ОписаниеОшибки ;
				_ОбщийМодульВызовСервера.СделатьЗаписьВМониторинг(Заявка, истина, Текст); ////НК
			Иначе	
				Текст = Текст+ Символы.ПС+ " Отправлено сообщение адресату. "  ;
				_ОбщийМодульВызовСервера.СделатьЗаписьВМониторинг(Заявка, истина, Текст); ////НК
			КонецЕсли; 
		КонецЕсли;
		
		htmlТекст=ПолучитьhtmlТекст(Результат.Отказ, Текст);
		Ответ.УстановитьТелоИзСтроки(htmlТекст);
		
		//////////////////////////////////
		
		
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПараметрыИзЗапроса( Запрос)
	
	Результат  = Новый Структура("Текст,Отказ,Заявка, ИдЗаявка, КонтрольнаяСумма, Комментарий","",Ложь,,Документы._ЗаявкаНаОплату.ПустаяСсылка(),"","", "");
	
	ИдЗаявка= Запрос.ПараметрыЗапроса.Получить("Idorder");
	
	//ИдЗаявка= Запрос["ПараметрыURL"].Получить("Idorder");
	Если  ИдЗаявка = Неопределено  Тогда
		
		Результат.Текст =" Отсутствует параметр Параметр Idorder ";
		Результат.Отказ = Истина;
		Возврат Результат;
		
	Иначе 
		Результат.ИдЗаявка = ИдЗаявка;	
	КонецЕсли; 
	
	//BSP-8 Механизм редактирования заявок
	//Параметр hash передает контрольную сумму версии объекта
	
	КонтрольнаяСумма = Запрос.ПараметрыЗапроса.Получить("hash");
	
	Если КонтрольнаяСумма = Неопределено  Тогда
		
		Результат.Текст =" Отсутствует параметр Параметр hash ";
		Результат.Отказ = Истина;
		Возврат Результат;
		
	Иначе 
		Результат.КонтрольнаяСумма = КонтрольнаяСумма;	
		
	КонецЕсли;
	
	//Параметр Комментарий для метода Improve
	Комментарий = Запрос.ПараметрыЗапроса.Получить("comment");
	
	Если ЗначениеЗаполнено(Комментарий) Тогда

		Результат.Комментарий = Комментарий;	

	КонецЕсли;
	
	//
	
	Результат.Заявка = ПолучитьЗаявку(ИдЗаявка);
	//\\++
	МассивСтрок = Новый Массив;
	Если Результат.Заявка.РазбивкаПоСтатьям.КОличество() > 1 тогда
		н = 0;
		Пока н <= Результат.Заявка.РазбивкаПоСтатьям.КОличество()-1 Цикл
			номерстроки = Запрос.ПараметрыЗапроса.Получить("str"+Строка(н));
			Если номерстроки <> неопределено тогда
				МассивСтрок.Добавить(номерстроки);
			КонецЕсли;
			н = н +1;
		КонецЦикла;
	КонецЕсли;
	Результат.Вставить("МассивСтрок", МассивСтрок);
	//\\--
	Если Результат.Заявка.Пустая()  Тогда 
		
		Результат.Текст ="Заявка не найдена";
		Результат.Отказ = Истина;
	
	//BSP-3 "не дать согласовать заявку которая помечена на удаление"
	ИначеЕсли Результат.Заявка.ПометкаУдаления Тогда
		Результат.Текст ="Заявка помечена на удаление";
		Результат.Отказ = Истина;		
	//	
	
	ИначеЕсли ОтличаетсяКонтрольнаяСумма(Результат.Заявка, КонтрольнаяСумма) Тогда
		Результат.Текст ="Версия заявки отличается";
		Результат.Отказ = Истина;
			
	КонецЕсли;
	

	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗаявку(ИдЗаявка)
	Попытка
		
		Уид = Новый УникальныйИдентификатор(ИдЗаявка);	
		
	Исключение
		Возврат Документы._ЗаявкаНаОплату.ПустаяСсылка();
		
	КонецПопытки;
	
	Ссылка = Документы._ЗаявкаНаОплату.ПолучитьСсылку(Уид);
	
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	_ЗаявкаНаОплату.Ссылка КАК Ссылка
	|ИЗ
	|	Документ._ЗаявкаНаОплату КАК _ЗаявкаНаОплату
	|ГДЕ
	|	_ЗаявкаНаОплату.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы._ЗаявкаНаОплату.ПустаяСсылка();
	Иначе	
		Возврат Ссылка;
		
	КонецЕсли;
	
	
	
КонецФункции // ()

Функция ОтличаетсяКонтрольнаяСумма(Ссылка, КонтрольнаяСумма)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НЕ ВерсииОбъектов.КонтрольнаяСумма = &КонтрольнаяСумма КАК ОтличаетсяКонтрольнаяСумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ВерсииОбъектов.НомерВерсии) КАК НомерВерсии,
		|		_ЗаявкаНаОплату.Ссылка КАК Ссылка
		|	ИЗ
		|		РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ._ЗаявкаНаОплату КАК _ЗаявкаНаОплату
		|			ПО ВерсииОбъектов.Объект = _ЗаявкаНаОплату.Ссылка
		|	ГДЕ
		|		_ЗаявкаНаОплату.Ссылка = &Ссылка
		|	СГРУППИРОВАТЬ ПО
		|		_ЗаявкаНаОплату.Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|		ПО (ВложенныйЗапрос.Ссылка = ВерсииОбъектов.Объект
		|		И ВерсииОбъектов.НомерВерсии = ВложенныйЗапрос.НомерВерсии)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КонтрольнаяСумма", КонтрольнаяСумма);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОтличаетсяКонтрольнаяСумма
	КонецЕсли;
	
КонецФункции

Функция ПроверкаУстановкаСтатуса(Заявка,Статус)
	Результат  = Новый Структура("Текст,Отказ","",Ложь);
	ТекстОшибки= "";
	ТекущийСтатус = Заявка.Статус;
	Если 	ТекущийСтатус  = Статус Тогда
		//++13.02
		Если  не (Статус = перечисления._СтатусыЗаявок.НаСогласовании и Заявка.ПервыйСогласован) тогда
			Результат.Отказ = Истина;
			ТекстОшибки = "Заявка  %Документ%  уже имеет статус ""%Статус%"" ";		
		КонецЕсли;
	Иначеесли	Статус =  Перечисления._СтатусыЗаявок.Согласован  Тогда
		
		Результат.Отказ = Документы._ЗаявкаНаОплату.ПроверитьВозвожностьПолучателяСогласовать(Заявка,ТекстОшибки);
		Если не Результат.Отказ Тогда
			
			Результат.Отказ =  НЕ (ТекущийСтатус =  Перечисления._СтатусыЗаявок.НаСогласовании);
			ТекстОшибки = "Текущий статус  не соотвествует. У документа %Документ% статус ""%Статус%"" Нельзя установить ";
		КонецЕсли;
		
	ИначеЕсли 	Статус  = Перечисления._СтатусыЗаявок.НеСогласован  Тогда
		Результат.Отказ = Документы._ЗаявкаНаОплату.ПроверитьВозвожностьПолучателяСогласовать(Заявка,ТекстОшибки);
		Если не Результат.Отказ Тогда
			
			Результат.Отказ =  НЕ (ТекущийСтатус =  Перечисления._СтатусыЗаявок.НаСогласовании);
			ТекстОшибки = "Текущий статус  не соотвествует. У документа %Документ% статус ""%Статус%"" Нельзя установить ";
		КонецЕсли;
		
	ИначеЕсли  Статус = Перечисления._СтатусыЗаявок.Оплачено  Тогда
		
		Результат.Отказ = Документы._ЗаявкаНаОплату.ПроверитьВозвожностьПользователяОплатить(Заявка, ТекстОшибки = "");
		
		Если не Результат.Отказ Тогда
			
			Результат.Отказ = НЕ (ТекущийСтатус =  Перечисления._СтатусыЗаявок.Отправлен или  ТекущийСтатус =  Перечисления._СтатусыЗаявок.Согласован);	
			ТекстОшибки = "Текущий статус  не соотвествует. У документа %Документ% статус ""%Статус%"" Нельзя установить.  ";
		КонецЕсли;
		
	//BSP-8 
	ИначеЕсли Статус = Перечисления._СтатусыЗаявок.Доработать ИЛИ Статус = Перечисления._СтатусыЗаявок.Перезвонить Тогда
		Результат.Отказ = Документы._ЗаявкаНаОплату.ПроверитьВозвожностьПолучателяСогласовать(Заявка,ТекстОшибки);
		Если не Результат.Отказ Тогда
			
			Результат.Отказ =  НЕ (ТекущийСтатус =  Перечисления._СтатусыЗаявок.НаСогласовании);
			ТекстОшибки = "Текущий статус  не соотвествует. У документа %Документ% статус ""%Статус%"" Нельзя установить ";
		КонецЕсли;
	//--
	КонецЕсли;
	
	Если Результат.Отказ  Тогда
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Заявка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Статус);
		Результат.Текст = ТекстОшибки;
	Иначе
		
		//++13.02
		Если Статус = перечисления._СтатусыЗаявок.НаСогласовании и Заявка.ПервыйСогласован тогда
			Текст = "У документа %Документ% есть второй согласующий.Заявка останется в статусе ""%Статус%""";
			Текст = СтрЗаменить(Текст, "%Документ%", Заявка);
			Текст = СтрЗаменить(Текст, "%Статус%", Статус);
		Иначе
			Текст = "У документа %Документ% установлен новый статус ""%Статус%""";
			Текст = СтрЗаменить(Текст, "%Документ%", Заявка);
			Текст = СтрЗаменить(Текст, "%Статус%", Статус);
		КонецЕсли;
		Результат.Текст = Текст; 
	КонецЕсли;
	
	Возврат Результат;
КонецФункции 

Функция УстановкаСтатусаПострочно(Заявка,МассивСтрок)
	Результат  = Новый Структура("Текст,Отказ","",Ложь);
	Результат.Вставить("НужноОТправитьСообщение",ложь);
	ОБ = Заявка.ПолучитьОбъект();
	Для каждого номерстроки из МассивСтрок Цикл
		номерстроки = число(номерстроки);
		Строка = ОБ.РазбивкаПОСтатьям[номерстроки-1];
		Если не Строка.ПервыйСогласовал тогда
			Строка.ПервыйСогласовал = истина;
			Если  не ЗначениеЗаполнено(Строка.ВторойСогласователь) тогда
				Строка.ВторойСогласовал = истина;
			КонецЕсли;
		ИначеЕсли  Строка.ПервыйСогласовал и ЗначениеЗаполнено(Строка.ВторойСогласователь) тогда
			Строка.ВторойСогласовал = истина;			 
		КонецЕсли;
	КонецЦикла;
	//проверить, если согласовали все первые согласователи, то нужно отпраивть письма вторым. Статус- на согласовании
	//если не все первые согласовали, то письма отправлять никому не нужно
	//Если все вторые согласовали уже, то нужно изменить статус на согласовано и отправить бухгалтерам
	ПараметрыОТбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПервыйСогласовал", истина);
	НС = ОБ.РазбивкаПОСтатьям.НайтиСтроки(ПараметрыОтбора);
	Текст = "";
	Если НС.КОличество() = ОБ.РазбивкаПОСтатьям.КОличество() тогда
		//все первые согласовали
		ПараметрыОТбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВторойСогласовал", истина);
		НС = ОБ.РазбивкаПОСтатьям.НайтиСтроки(ПараметрыОтбора);
		Если НС.КОличество() = ОБ.РазбивкаПОСтатьям.Количество() тогда
			//все вторые согласовали - заявка согласована
			Об.Статус = перечисления._СтатусыЗаявок.Согласован;
			Попытка
				
				Текст = "У документа %Документ% установлен новый статус ""%Статус%""";
				Текст = СтрЗаменить(Текст, "%Документ%", Заявка);
				Текст = СтрЗаменить(Текст, "%Статус%", Об.Статус);
				Результат.Текст = Текст; 
				об.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				Результат.Текст ="Ошибка при проведении заявки. Статус не установлен!";
				Результат.Отказ = Истина;			
				
			КонецПопытки;
		Иначе
			//нужно отправить на согласование вторым
			Текст = "У документа несколько согласователей. Будет отправлено письмо вторым согласователям";
			Контакты = _ОбщийМодульВызовСервера.ПолучитьСтруктуруПисемПриНесколькихСтатей(Заявка);
			Результат.Вставить("Контакты",Контакты);
			Результат.НужноОТправитьСообщение = Истина;
		КонецЕсли;
	Иначе
		Текст = "Вы согласовали свою часть заявки. У документа несколько согласователей.";
	КонецЕсли;
	
	Попытка
		Результат.Текст = Текст;
		об.Записать(РежимЗаписиДокумента.Проведение);			
	Исключение
		Результат.Текст ="Ошибка при проведении заявки. Статус не установлен!";
		Результат.Отказ = Истина;	
		
	КонецПопытки; 
	
	
	Возврат Результат;
	
КонецФункции            

Функция УстановкаСтатуса(Заявка,Статус, Комментарий = Неопределено)
	Результат  = Новый Структура("Текст,Отказ","",Ложь);
	
	Если _ОбщийМодульВызовСервера.ЕстьДоступУстановитьСтатус(Статус)  Тогда
		
		
		Об =Заявка.ПолучитьОбъект();
		//BSP-8 Доработать, Перезвонить
		Если Статус = Перечисления._СтатусыЗаявок.Перезвонить
			ИЛИ Статус = Перечисления._СтатусыЗаявок.Доработать Тогда
			Об.СтатусСогласования = Статус;
			
		Иначе
			Об.Статус = Статус;
		КонецЕсли;
		//Об.Статус = Статус;
		Если ЗначениеЗаполнено(Комментарий) Тогда
			Об.КомментарийСогласования = Об.КомментарийСогласования + Символы.ПС + Комментарий;			
		КонецЕсли;
		//--
		Попытка
			
			Текст = "У документа %Документ% установлен новый статус ""%Статус%""";
			Текст = СтрЗаменить(Текст, "%Документ%", Заявка);
			Текст = СтрЗаменить(Текст, "%Статус%", Статус);
			Результат.Текст = Текст; 
			об.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			Результат.Текст ="Ошибка при проведении заявки. Статус не установлен!";
			Результат.Отказ = Истина;
			
			
		КонецПопытки;
		
	Иначе
		
		Пользователь =  Пользователи.ТекущийПользователь();
		Результат.Текст = "У пользователя :" + строка(Пользователь)+ " нет доступа для установки статуса " + строка(Статус);
		Результат.Отказ = Истина;
		
		
	КонецЕсли; 
	
	
	Возврат Результат;
	
КонецФункции            

Функция УстановкаСтатусаВторой(Заявка,Статус)
	Результат  = Новый Структура("Текст,Отказ","",Ложь);
	
	Если _ОбщийМодульВызовСервера.ЕстьДоступУстановитьСтатус(Статус)  Тогда
		
		
		Об =Заявка.ПолучитьОбъект();
		Об.Статус = Статус;
		Попытка
			
			Текст = "У документа %Документ% два согласователя.Отправили второму";
			Текст = СтрЗаменить(Текст, "%Документ%", Заявка);
			Текст = СтрЗаменить(Текст, "%Статус%", Статус);
			Результат.Текст = Текст; 
			//об.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			Результат.Текст ="Ошибка при проведении заявки. Статус не установлен!";
			Результат.Отказ = Истина;
			
			
		КонецПопытки;
		
	Иначе
		
		Пользователь =  Пользователи.ТекущийПользователь();
		Результат.Текст = "У пользователя :" + строка(Пользователь)+ " нет доступа для установки статуса " + строка(Статус);
		Результат.Отказ = Истина;
		
		
	КонецЕсли; 
	
	
	Возврат Результат;
	
КонецФункции            


Функция ПолучитьhtmlТекст(Отказ, Текст)
	
	
	
	
	Если Отказ Тогда
		htmlТекст= "<i style=""font-size: 100px; color: Red"">Операция не выполнена</i><h1></h1>" + "<i style=""font-size: 72px; color: Black"">" + Текст+"</i>";
	Иначе	
		htmlТекст =  "<h1>Новый статус установлен!</h1><h2>"+ Текст+ "</h2>";
	КонецЕсли;	
	
	Возврат  htmlТекст;
	
	
КонецФункции // ()

Функция ПолучитьhtmlТекстВторой(Отказ, Текст)
	
	
	
	
	Если Отказ Тогда
		htmlТекст= "<i style=""font-size: 100px; color: Red"">Операция не выполнена</i><h1></h1>" + "<i style=""font-size: 72px; color: Black"">" + Текст+"</i>";
	Иначе	
		htmlТекст =  "<h1>Два согласователя!</h1><h2>"+ Текст+ "</h2>";
	КонецЕсли;	
	
	Возврат  htmlТекст;
	
	
КонецФункции // ()


