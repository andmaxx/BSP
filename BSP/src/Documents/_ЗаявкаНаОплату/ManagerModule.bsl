// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
// СтандартныеПодсистемы.Взаимодействия

// Получает участников встречи.
//
// Параметры:
//  Ссылка  - ДокументСсылка.Встреча - документ, контакты которого необходимо получить.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица, содержащая колонки "Контакт", "Представление" и "Адрес".
//
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Возврат Взаимодействия.ПолучитьУчастниковПоТаблице(Ссылка);
	
КонецФункции

// Конец СтандартныеПодсистемы.Взаимодействия


#Область ШаблоныСообщений



Функция  ПолучитьМассивОписанияПрисоединенныхФайлов(Заявка ) Экспорт
	
	СписокФайлов = Новый Массив;
	
	 
	Если Заявка=Неопределено или Заявка=Документы._ЗаявкаНаОплату.ПустаяСсылка()  Тогда
		Возврат СписокФайлов;
	КонецЕсли;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_ЗаявкаНаОплатуПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник._ЗаявкаНаОплатуПрисоединенныеФайлы КАК _ЗаявкаНаОплатуПрисоединенныеФайлы
	|ГДЕ
	|	_ЗаявкаНаОплатуПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И _ЗаявкаНаОплатуПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОписаниеФайла = РаботаСФайлами.ДанныеФайла(ВыборкаДетальныеЗаписи.Ссылка);
		
		Если Прав(ОписаниеФайла.ИмяФайла, 1) = "." Тогда
			ОписаниеФайлаИмяФайла = Лев(ОписаниеФайла.ИмяФайла, СтрДлина(ОписаниеФайла.ИмяФайла) - 1);
		Иначе
			ОписаниеФайлаИмяФайла = ОписаниеФайла.ИмяФайла;
		КонецЕсли;
		
		ОписаниеФайла.ИмяФайла = ОписаниеФайлаИмяФайла;
		
		СписокФайлов.Добавить(ОписаниеФайла);	
		
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции



// СтандартныеПодсистемы.ШаблоныСообщений
// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТипШаблона = "Письмо" Тогда
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "Лимит";
		НовыйРеквизит.Представление = НСтр("ru = 'Текущий лимит на дату отправки письма'");
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "СуммаПоБюджету";
		НовыйРеквизит.Представление = НСтр("ru = 'Сумма по бюджету'");
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "ВнеБюджета";
		НовыйРеквизит.Представление = НСтр("ru = 'Сумма Вне бюджета'");
		
		
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "КнопкаСогласован";
		НовыйРеквизит.Представление = НСтр("ru = 'Установить статус Согласован онлайн'");
		//НовыйРеквизит.Подсказка
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "КнопкаНеСогласован";
		НовыйРеквизит.Представление = НСтр("ru = 'Установить статус Не Согласован онлайн'");
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "КнопкаОплачено";
		НовыйРеквизит.Представление = НСтр("ru = 'Установить статус оплачено онлайн онлайн'");
		
		//BSP-8 Доработать, Перезвонить
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "КнопкаДоработать";
		НовыйРеквизит.Представление = НСтр("ru = 'Установить статус Доработать онлайн'");
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "КнопкаПерезвонить";
		НовыйРеквизит.Представление = НСтр("ru = 'Установить статус Перезвонить онлайн'");
		//--
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "КнопкаЗапускПриложение";
		НовыйРеквизит.Представление = НСтр("ru = 'Запустить web - приложение'");
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "Вложение";
		НовыйРеквизит.Представление = НСтр("ru = 'Вложение присоединенных файлов'");
		
		
		//++Гаранин
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "СогласованоПервым";
		НовыйРеквизит.Представление = НСтр("ru = 'Вложение присоединенных файлов'");
		
		//--
		
		
		
		//		Если ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		//			КартинкаКнопки = Вложения.Добавить();
		//			КартинкаКнопки.Идентификатор = "КартинкаКнопкиСогласован";
		//			КартинкаКнопки.Имя = "КартинкаКнопкиСогласован";
		//			КартинкаКнопки.Представление = НСтр("ru = 'Кнопка для установки статус Согласован'");
		//			КартинкаКнопки.ТипФайла = "jpg";
		//			КартинкаКнопки.Реквизит = "КнопкаСогласован";
		//			
		//		    КартинкаКнопки = Вложения.Добавить();
		//			КартинкаКнопки.Идентификатор = "КартинкаКнопкиНеСогласован";
		//			КартинкаКнопки.Имя = "КартинкаКнопкиНеСогласован";
		//			КартинкаКнопки.Представление = НСтр("ru = 'Кнопка для установки статус не Согласован'");
		//			КартинкаКнопки.ТипФайла = "jpg";
		//			КартинкаКнопки.Реквизит = "КнопкаНеСогласован";
		//			
		//			 КартинкаКнопки = Вложения.Добавить();
		//			КартинкаКнопки.Идентификатор = "КартинкаКнопкиОплачено";
		//			КартинкаКнопки.Имя = "КартинкаКнопкиОплачено";
		//			КартинкаКнопки.Представление = НСтр("ru = 'Кнопка для установки статус Оплачено'");
		//			КартинкаКнопки.ТипФайла = "jpg";
		//			КартинкаКнопки.Реквизит = "КнопкаОплачено";
		//			
		//				 КартинкаКнопки = Вложения.Добавить();
		//			КартинкаКнопки.Идентификатор = "КартинкаКнопкиЗапускПриложение";
		//			КартинкаКнопки.Имя = "КартинкаКнопкиЗапускПриложение";
		//			КартинкаКнопки.Представление = НСтр("ru = 'Кнопка для запуска приложения'");
		//			КартинкаКнопки.ТипФайла = "jpg";
		//			КартинкаКнопки.Реквизит = "КнопкаЗапускПриложение";
		
		
		//
		//		КонецЕсли;
		
	КонецЕсли;
	
	
	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
//Свойство	Значение
//Сообщение	Структура
//Вложения	Соответствие
//ДополнительныеПараметры	Структура
//ВидСообщения	"ЭлектроннаяПочта"
//ОтправитьСразу	Ложь
//ПараметрыСообщения	Структура
//ПреобразовыватьHTMLДляФорматированногоДокумента	Истина
//ПроизвольныеПараметры	Соответствие
//РасширенныйСписокПолучателей	Ложь
//УчетнаяЗапись	
//ЗначенияОбщихРеквизитов	Соответствие
//ЗначенияРеквизитов	Соответствие
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры, Контакт=неопределено) Экспорт

	
	Заявка = ПредметСообщения;
	
	АдресПубликации = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВИнтернете();
	//БазаДанных =АдресПубликации + "/Agreement";  
	БазаДанных =АдресПубликации + "/negotiation";//для копии  
	Сервис = БазаДанных +"/hs/Orders/V1"; 
	
	Струк =	_ОбщийМодульВызовСервера.ПолучитьЛимитыПоСтаьтиВЗаявке(Заявка);
	
	СуммаПоБюджету =Струк.СуммаПоБюджету;
	ВнеБюджета = Струк.СуммаВнеБюджета;
	Лимит =  Струк.Лимит;
	Инфо= Струк.Инфо;
	
	
	Если Сообщение.ЗначенияРеквизитов["СуммаПоБюджету"] <> Неопределено Тогда
		Сообщение.ЗначенияРеквизитов["СуммаПоБюджету"] = СуммаПоБюджету;
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов["ВнеБюджета"] <> Неопределено Тогда
		Сообщение.ЗначенияРеквизитов["ВнеБюджета"] =  ВнеБюджета;
		
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов["Лимит"] <> Неопределено Тогда
		Сообщение.ЗначенияРеквизитов["Лимит"] =  Лимит;
		
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов["Лимит"] <> Неопределено Тогда
		Сообщение.ЗначенияРеквизитов["Лимит"] =  Лимит;
		
	КонецЕсли;
	
	
	//++
	Если Сообщение.ЗначенияРеквизитов["СогласованоПервым"] <> Неопределено Тогда
		Если ЗначениеЗаполнено(Заявка.ВторойСогласователь) и Заявка.ПервыйСогласован Тогда
			Сообщение.ЗначенияРеквизитов["СогласованоПервым"] =  "У данной заявки два согласователя. Первый уже СОГЛАСОВАЛ.";
		КонецЕсли;
		Если Заявка.РазбивкаПоСтатьям.Количество() >1 тогда
			ПараметрыОТбора = Новый Структура;
			ПараметрыОтбора.Вставить("ПервыйСогласовал", истина);
			НС = Заявка.РазбивкаПОСтатьям.НайтиСтроки(ПараметрыОтбора);
			Текст = "";
			Если НС.КОличество() = Заявка.РазбивкаПОСтатьям.КОличество() тогда
				//все первые согласовали		
				Сообщение.ЗначенияРеквизитов["СогласованоПервым"] =  "У данной заявки несколько согласователей. Первые уже СОГЛАСОВАЛИ.";
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;

	
	//--
	
	Если Сообщение.ЗначенияОбщихРеквизитов["ОбратныйАдрес"] <> Неопределено Тогда
		Сообщение.ЗначенияОбщихРеквизитов["ОбратныйАдрес"] = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты;
	КонецЕсли;
	
	
	Если Сообщение.ЗначенияРеквизитов["Вложение"] <> Неопределено Тогда
		
		СписокФайлов=  	ПолучитьМассивОписанияПрисоединенныхФайлов(Заявка );
		
		СтрВложения = "";
		Для Каждого ОписаниеФайла Из СписокФайлов Цикл
			
			СтрВложения = СтрВложения+ ?(ЗначениеЗаполнено(СтрВложения), "; ","") + ОписаниеФайла.ИмяФайла;
			
			Сообщение.Вложения.Вставить(ОписаниеФайла.ИмяФайла,  ОписаниеФайла.СсылкаНаДвоичныеДанныеФайла);
			
		КонецЦикла;
		
		Сообщение.ЗначенияРеквизитов["Вложение"] =  СтрВложения;
		
		
	КонецЕсли;
	
	
	///++нужно получить строки, которые может согласовывать
	МассивСтрок = Новый Массив;
	
	Для каждого строка из Заявка.разбивкапостатьям Цикл
				Если строка.Согласователь = Контакт и не Строка.ПервыйСогласовал тогда
					МассивСтрок.добавить(строка);
				ИначеЕсли Строка.ПервыйСогласовал и строка.ВторойСогласователь = Контакт тогда
					МассивСтрок.добавить(строка);
				ИначеЕсли Контакт = неопределено тогда
					МассивСтрок.добавить(строка);
				КонецЕсли;
			КонецЦикла;
	Сообщение.ЗначенияРеквизитов.вставить("МассивСтрок", МассивСтрок);
	//-- 
	
	// +++ Кнопки были изменены, чтобы они выводили только ссылку
	Если Сообщение.ЗначенияРеквизитов["КнопкаСогласован"] <> Неопределено Тогда
		Idorder = Строка(Заявка.УникальныйИдентификатор());
		Метод = "/Agreed";
		//BSP-8
		hash = РегистрыСведений.ВерсииОбъектов.КонтрольнаяСуммаПоследнейВерсии(Заявка);
		Параметры =  "?Idorder=" + Idorder + "&hash=" + hash;
		//++
		Если массивСтрок.Количество() > 0 тогда
			н = 0;
			Для каждого стр из МассивСтрок Цикл
				 Параметры = Параметры +"&str"+строка(н)+"="+строка(стр.НомерСтроки);
				 н=н+1;
			КонецЦикла;
		КонецЕсли;
		
		//--
		
		Ссылка = Сервис+ Метод+Параметры;
		
		
		
		Если ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			

			HTMLТекстКнопки = Ссылка;
			Сообщение.ЗначенияРеквизитов["КнопкаСогласован"] = HTMLТекстКнопки;
			
		Иначе
			Сообщение.ЗначенияРеквизитов["КнопкаСогласован"] = Ссылка;
		КонецЕсли;
	КонецЕсли;
			
	
	Если Сообщение.ЗначенияРеквизитов["КнопкаНеСогласован"] <> Неопределено Тогда
		
		Idorder = Строка(Заявка.УникальныйИдентификатор());
		Метод = "/NoAgreed";
		//BSP-8
		hash = РегистрыСведений.ВерсииОбъектов.КонтрольнаяСуммаПоследнейВерсии(Заявка);
		Параметры =  "?Idorder=" + Idorder + "&hash=" + hash;
		Ссылка = Сервис+ Метод+Параметры;
		
		Если ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			
		HTMLТекстКнопки = Ссылка;
		Сообщение.ЗначенияРеквизитов["КнопкаНеСогласован"] = HTMLТекстКнопки;
			
		Иначе
			Сообщение.ЗначенияРеквизитов["КнопкаНеСогласован"] = Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов["КнопкаОплачено"] <> Неопределено Тогда
		
		Idorder = Строка(Заявка.УникальныйИдентификатор());
		IdUser =  Строка(Заявка.Согласователь.УникальныйИдентификатор());
		Метод = "/Paid";
		//BSP-8
		hash = РегистрыСведений.ВерсииОбъектов.КонтрольнаяСуммаПоследнейВерсии(Заявка);
		Параметры =  "?Idorder=" + Idorder + "&hash=" + hash;
		
		Ссылка = Сервис+ Метод+Параметры;
		
		
		Если ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда

			HTMLТекстКнопки = Ссылка;
			Сообщение.ЗначенияРеквизитов["КнопкаОплачено"] = HTMLТекстКнопки;
			
		Иначе

			Сообщение.ЗначенияРеквизитов["КнопкаОплачено"] = Ссылка;
		КонецЕсли;
	КонецЕсли;
	//BSP-8 Кнопка Доработать, Перезвонить
	Если Сообщение.ЗначенияРеквизитов["КнопкаДоработать"] <> Неопределено Тогда
		Idorder = Строка(Заявка.УникальныйИдентификатор());
		Метод = "/ImproveComment";
		//BSP-8
		hash = РегистрыСведений.ВерсииОбъектов.КонтрольнаяСуммаПоследнейВерсии(Заявка);	
		Ссылка = Сервис+ Метод;
		Параметры =  "?Idorder=" + Idorder + "&hash=" + hash;
		Ссылка = Сервис+ Метод+Параметры;
		Если ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			HTMLТекстКнопки = Ссылка;
			Сообщение.ЗначенияРеквизитов["КнопкаДоработать"] = HTMLТекстКнопки;
		Иначе
			Сообщение.ЗначенияРеквизитов["КнопкаДоработать"] = НСтр("ru = 'Установить статус Доработать:'") + Символы.ПС + Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если Сообщение.ЗначенияРеквизитов["КнопкаПерезвонить"] <> Неопределено Тогда
		Idorder = Строка(Заявка.УникальныйИдентификатор());
		Метод = "/Call";
		//BSP-8
		hash = РегистрыСведений.ВерсииОбъектов.КонтрольнаяСуммаПоследнейВерсии(Заявка);
		Параметры =  "?Idorder=" + Idorder + "&hash=" + hash;
		Ссылка = Сервис+ Метод+Параметры;
		Если ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			HTMLТекстКнопки =Ссылка;
			Сообщение.ЗначенияРеквизитов["КнопкаПерезвонить"] = HTMLТекстКнопки;
		Иначе
			Сообщение.ЗначенияРеквизитов["КнопкаПерезвонить"] = НСтр("ru = 'Установить статус Перезвонить:'") + Символы.ПС + Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов["КнопкаЗапускПриложение"] <> Неопределено Тогда
		
		Ссылка=  БазаДанных ;
		
		Если ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			
			HTMLТекстКнопки = Ссылка;
			
			Сообщение.ЗначенияРеквизитов["КнопкаЗапускПриложение"] = HTMLТекстКнопки;
			
		КонецЕсли;
	КонецЕсли;
	// ---
	//+++ Дата оплаты
    ДатаОплаты = ПредметСообщения.ДатаОплаты;
    ДатаОплаты = Формат(ДатаОплаты, "ДФ=дд.ММ");
    Сообщение.ЗначенияРеквизитов["ДатаОплаты1"] =  ДатаОплаты;
    //---
	
	//+++    
    Сообщение.ЗначенияРеквизитов["ДатаОплаты"] =  Формат(ПредметСообщения.ДатаОплаты, "ДФ=дд.ММ.гггг");
	Если ЗначениеЗаполнено(ПредметСообщения.ДатаТендера) тогда
		Сообщение.ЗначенияРеквизитов["ДатаТендера"] = Формат(ПредметСообщения.ДатаТендера, "ДФ=дд.ММ.гггг");
	Иначе
		Сообщение.ЗначенияРеквизитов["ДатаТендера"] =  "";
	Конецесли;
    //---

  
	// +++ Построение таблицы
	
	Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = "<br>" + "<table border=""1"" cellpadding=""1"" cellspacing=""0"">
	|<tbody>
	|<tr>";
	// Заполняем шапку таблицы
	ЦФО = 0;
	Подразделение = 0;
	СтатьяДДС = 0;
	Сумма = 0;
	Комментарий = 0;
	Если Сообщение.ЗначенияРеквизитов["МассивСтрок"] <>неопределено тогда
		Для каждого Строка из Сообщение.ЗначенияРеквизитов["МассивСтрок"] Цикл
			Если ЗначениеЗаполнено(Строка.ЦФО) Тогда
				ЦФО = ЦФО + 1;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Подразделение) Тогда
				Подразделение = Подразделение + 1;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СтатьяДДС) Тогда
				СтатьяДДС = СтатьяДДС + 1; 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Сумма) Тогда
				Сумма = Сумма + 1; 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Комментарий) Тогда
				Комментарий = Комментарий + 1; 
			 КонецЕсли; 
		КонецЦикла;
	Конецесли;

	Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "<td bgcolor=""#dcdcdc"" align=""center""><b>№</b></td>"; 
	Если ЦФО <> 0 Тогда
		Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "<td bgcolor=""#dcdcdc"" align=""center""><b>ЦФО</b></td>";
	КонецЕсли;
	Если Подразделение <> 0 Тогда
		Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "<td bgcolor=""#dcdcdc"" align=""center""><b>Подразделение</b></td>";
	КонецЕсли;
	Если СтатьяДДС <> 0 Тогда
		Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "<td bgcolor=""#dcdcdc"" align=""center""><b>СтатьяДДС</b></td>";
	КонецЕсли;
	Если Сумма <> 0 Тогда
		Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "<td bgcolor=""#dcdcdc"" align=""center""><b>Сумма</b></td>";
	КонецЕсли;
	Если Комментарий <> 0 Тогда
		Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "<td bgcolor=""#dcdcdc"" align=""center""><b>Комментарий</b></td>";
	КонецЕсли;
	Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "</tr>";
	
	// Заполняем тело таблицы
	Если Сообщение.ЗначенияРеквизитов["МассивСтрок"] <>неопределено тогда
		Для каждого Строка из Сообщение.ЗначенияРеквизитов["МассивСтрок"] Цикл
			Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "<tr>" + "<td style=""align=""center"">" + Строка.НомерСтроки + "</td>";
			Если ЗначениеЗаполнено(Строка.ЦФО) Тогда
				Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "<td style=""align=""center"">" + Строка.ЦФО + "</td>";
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Подразделение) Тогда
				 Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] +  "<td style=""align=""center"">" + Строка.Подразделение + "</td>";
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СтатьяДДС) Тогда
				 Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "<td style=""align=""center"">" + Строка.СтатьяДДС + "</td>"; 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Сумма) Тогда
				 Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "<td style=""align=""center"">" + Строка.Сумма + "</td>"; 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Комментарий) Тогда
				 Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] +  "<td style=""align=""center"">" + Строка.Комментарий + "</td>"; 
			 КонецЕсли;
			Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "</tr>"; 
		КонецЦикла;
	Конецесли;
	Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] = Сообщение.ЗначенияРеквизитов["РазбивкаПоСтатьям"] + "</tbody></table>";

	// --- 

	
	
КонецПроцедуры
// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
КонецПроцедуры
// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электрнной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения, КонтактИзПараметров = неопределено) Экспорт
	Статус=  ПредметСообщения.Предмет.Статус;
	Заявка =ПредметСообщения.Предмет;
	
	//Результат= ВзаимодействияВызовСервера.ПолучитьАдресаЭлектроннойПочтыКонтакта(Контакт)
	//
	//Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СсылкиИлиОбъекты, ТипыКонтактнойИнформации, ВидыКонтактнойИнформации, Дата)
	//
	//ЭлектроннаяПочтаСтрокой = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЭлектроннаяПочта);
	
	
	// СписокПолучателей = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(ПредметСообщения.ЭлектроннаяПочтаСтрокой);
	
	
	
	Если Статус = Перечисления._СтатусыЗаявок.НаСогласовании  тогда
		
		Если КонтактИзПараметров<>неопределено тогда
			Контакт = КонтактИзПараметров;
		КонецЕсли;
		
		//BSP-8 Получатель сообщения = инициатор для Статуса Доработать и Перезвонить
		Если Заявка.СтатусСогласования = Перечисления._СтатусыЗаявок.Доработать Тогда
			Контакт = Заявка.Инициатор;
		ИначеЕсли Заявка.СтатусСогласования = Перечисления._СтатусыЗаявок.Перезвонить Тогда 
			Контакт = Заявка.Инициатор;
		Иначе
		//--	
			Если Заявка.РазбивкаПоСтатьям.Количество() = 1 тогда
				Если значениезаполнено(Заявка.ВторойСогласователь) и заявка.ПервыйСогласован тогда//++ 13.02.2021
					Контакт= Заявка.ВторойСогласователь;
				Иначе
					Контакт= Заявка.Согласователь;
				КонецЕсли;
			Иначе
				//нужно отправить письмо каждому согласователю со своей строкой. а если первые согласовали, то второму отправить тогда, когда все согласовали.
			КонецЕсли;
			Результат= ВзаимодействияВызовСервера.ПолучитьАдресаЭлектроннойПочтыКонтакта(Контакт);
			Если  Результат.Количество() >0  Тогда
					Адрес = Результат[0].АдресЭП;
					Представление = Результат[0].Представление;
					СтрокаПолучаатель = ПолучателиПисьма.Добавить();
					СтрокаПолучаатель.Адрес = Адрес ; 
					СтрокаПолучаатель.Представление = Представление;
					СтрокаПолучаатель.Контакт = Контакт;
			КонецЕсли;

			Контакты = _ОбщийМодульВызовСервера.ПолучитьСтруктуруПисемПриНесколькихСтатей(Заявка);
			Для каждого контакт из Контакты Цикл
				Результат= ВзаимодействияВызовСервера.ПолучитьАдресаЭлектроннойПочтыКонтакта(Контакт);
				Если  Результат.Количество() >0  Тогда
						Адрес = Результат[0].АдресЭП;
						Представление = Результат[0].Представление;
						СтрокаПолучаатель = ПолучателиПисьма.Добавить();
						СтрокаПолучаатель.Адрес = Адрес ; 
						СтрокаПолучаатель.Представление = Представление;
						СтрокаПолучаатель.Контакт = Контакт;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
	ИначеЕсли Статус = Перечисления._СтатусыЗаявок.Отправлен  тогда 
		
		//BSP-8 Получатель сообщения = инициатор для Статуса Доработать и Перезвонить
		Если Заявка.СтатусСогласования = Перечисления._СтатусыЗаявок.Доработать Тогда
			Контакт = Заявка.Инициатор;
		ИначеЕсли Заявка.СтатусСогласования = Перечисления._СтатусыЗаявок.Перезвонить Тогда 
			Контакт = Заявка.Инициатор;
		Иначе
		//--
			Контакты = _ОбщийМодульВызовСервера.ПолучитьБухгалтерыОрганизации(Заявка.Плательщик);
			
			Для х = 0 по  Контакты.Количество() -1 Цикл
				Контакт = Контакты[х];
				Результат= ВзаимодействияВызовСервера.ПолучитьАдресаЭлектроннойПочтыКонтакта(Контакт);
				Если  Результат.Количество() >0  Тогда
					Адрес = Результат[0].АдресЭП;
					Представление = Результат[0].Представление;
					СтрокаПолучаатель = ПолучателиПисьма.Добавить();
					СтрокаПолучаатель.Адрес = Адрес ; 
					СтрокаПолучаатель.Представление = Представление;                               
					СтрокаПолучаатель.Контакт = Контакт;
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления._СтатусыЗаявок.Согласован  тогда 	
		
		Контакты = _ОбщийМодульВызовСервера.ПолучитьБухгалтерыОрганизации(Заявка.Плательщик);
		
		Для х = 0 по  Контакты.Количество() -1 Цикл
			Контакт = Контакты[х];
			Результат= ВзаимодействияВызовСервера.ПолучитьАдресаЭлектроннойПочтыКонтакта(Контакт);
			Если  Результат.Количество() >0  Тогда
				Адрес = Результат[0].АдресЭП;
				Представление = Результат[0].Представление;
				СтрокаПолучаатель = ПолучателиПисьма.Добавить();
				СтрокаПолучаатель.Адрес = Адрес ; 
				СтрокаПолучаатель.Представление = Представление;
				СтрокаПолучаатель.Контакт = Контакт;
			КонецЕсли;
			
		КонецЦикла;
		
		
		
	ИначеЕсли Статус = Перечисления._СтатусыЗаявок.НеСогласован  тогда 
		Контакт= Заявка.Инициатор;
		Результат= ВзаимодействияВызовСервера.ПолучитьАдресаЭлектроннойПочтыКонтакта(Контакт);
		Если  Результат.Количество() >0  Тогда
			Адрес = Результат[0].АдресЭП;
			Представление = Результат[0].Представление;
			СтрокаПолучаатель = ПолучателиПисьма.Добавить();
			СтрокаПолучаатель.Адрес = Адрес ; 
			СтрокаПолучаатель.Представление = Представление;
			СтрокаПолучаатель.Контакт = Контакт;
		КонецЕсли;
		
		
		
	ИначеЕсли Статус = Перечисления._СтатусыЗаявок.Оплачено  тогда 
		
		Контакт= Заявка.Инициатор;
		Результат= ВзаимодействияВызовСервера.ПолучитьАдресаЭлектроннойПочтыКонтакта(Контакт);
		Если  Результат.Количество() >0  Тогда
			Адрес = Результат[0].АдресЭП;
			Представление = Результат[0].Представление;
			СтрокаПолучаатель = ПолучателиПисьма.Добавить();
			СтрокаПолучаатель.Адрес = Адрес ; 
			СтрокаПолучаатель.Представление = Представление;
			СтрокаПолучаатель.Контакт = Контакт;
		КонецЕсли;
		
		
		
		
	КонецЕсли; 
	
	
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ШаблоныСообщений


#КонецОбласти


#Область ОтправкаПисьмо

Функция ПолучитьШаблон(Заявка) Экспорт
	Шаблон = Справочники.ШаблоныСообщений.ПустаяСсылка();
	
	Если Заявка.Статус = Перечисления._СтатусыЗаявок.НаСогласовании  тогда
		
		//BSP-8 Статус Позвонить и Доработать
		Если Заявка.СтатусСогласования = Перечисления._СтатусыЗаявок.Доработать Тогда
			Шаблон = Справочники.ШаблоныСообщений.ЗаявкаДоработать;
		ИначеЕсли Заявка.СтатусСогласования = Перечисления._СтатусыЗаявок.Перезвонить Тогда 
			Шаблон = Справочники.ШаблоныСообщений.ЗаявкаПерезвонить;
		Иначе
			Шаблон = Справочники.ШаблоныСообщений.ЗаявкаНасогласовании;
		КонецЕсли;	
		//--
		
	ИначеЕсли Заявка.Статус = Перечисления._СтатусыЗаявок.Отправлен  тогда 
		
		//BSP-8 Статус Позвонить и Доработать
		Если Заявка.СтатусСогласования = Перечисления._СтатусыЗаявок.Доработать Тогда
			Шаблон = Справочники.ШаблоныСообщений.ЗаявкаДоработать;
		ИначеЕсли Заявка.СтатусСогласования = Перечисления._СтатусыЗаявок.Перезвонить Тогда 
			Шаблон = Справочники.ШаблоныСообщений.ЗаявкаПерезвонить;
		Иначе
			Шаблон = Справочники.ШаблоныСообщений.ЗаявкаОтправлена;	
		КонецЕсли;
		
	ИначеЕсли Заявка.Статус = Перечисления._СтатусыЗаявок.Согласован  тогда 	
		
		
		//++Гаранин. Если заявка срочная, то будем использовать шаблон СРОЧНО
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	_ИсторияИзмененияСтатуса.Заявка КАК Заявка,
		               |	МАКСИМУМ(_ИсторияИзмененияСтатуса.ДатаУстановки) КАК ДатаУстановки
		               |ИЗ
		               |	РегистрСведений._ИсторияИзмененияСтатуса КАК _ИсторияИзмененияСтатуса
		               |ГДЕ
		               |	_ИсторияИзмененияСтатуса.Статус = &Статус
		               |	И _ИсторияИзмененияСтатуса.Заявка = &Заявка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	_ИсторияИзмененияСтатуса.Заявка";
		Запрос.УстановитьПараметр("Статус", Перечисления._СтатусыЗаявок.Согласован);
		Запрос.УстановитьПараметр("Заявка", Заявка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество()=0 Тогда
			 Шаблон = Справочники.ШаблоныСообщений.ЗаявкаСогласована;
		Иначе
			 Выборка.Следующий();
			 ДатаСогласования = Выборка.ДатаУстановки;
			 Если НачалоДня(ДатаСогласования) = НачалоДня(Заявка.ДатаОплаты) Тогда
			 	Шаблон = Справочники.ШаблоныСообщений.ЗаявкаСогласованаСрочно;
			 Иначе
				Шаблон = Справочники.ШаблоныСообщений.ЗаявкаСогласована;
			КонецЕсли;	
		КонецЕсли;		
		//--Гаранин
		
		
		
		
	ИначеЕсли Заявка.Статус = Перечисления._СтатусыЗаявок.НеСогласован  тогда 
		
		Шаблон = Справочники.ШаблоныСообщений.ЗаявкаНесогласована;
		
	ИначеЕсли Заявка.Статус = Перечисления._СтатусыЗаявок.Оплачено  тогда 
		
		Шаблон = Справочники.ШаблоныСообщений.ЗаявкаОплачена;
		
		
		
	КонецЕсли; 
	
	Возврат Шаблон;
	
	
	
КонецФункции // ()


Функция  СоздатьЭлекстронноеПисьмоПоШаблону(Заявка) Экспорт
	
	
	Шаблон= ПолучитьШаблон(Заявка);
	
	Об = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();	
	Об.Заполнить(Шаблон);
	
	Возврат Об;
	
КонецФункции


#КонецОбласти


// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Заявка";
	КомандаПечати.Представление = НСтр("ru = 'Заявка '");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Не Пользователи.РолиДоступны("_ДемоПечатьНепроведенныхДокументов");
	
	// Счет на оплату в документ Adobe PDF.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Заявка";
	КомандаПечати.Представление = НСтр("ru = 'Заявка в документ Adobe PDF'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматPDF;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФорматСохранения = ТипФайлаТабличногоДокумента.PDF;
	
	
КонецПроцедуры



// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр),
//                                            см. УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм.
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Заявка");
	Если ПечатнаяФорма <> Неопределено Тогда
		ПечатнаяФорма.ТабличныйДокумент = ПечатьЗаявку(МассивОбъектов, ОбъектыПечати);
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Заявка на оплату'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL";
		
	КонецЕсли;
	
КонецПроцедуры


// Конец СтандартныеПодсистемы.Печать



// Процедура печати документа.
//
// Параметры:
//  МассивОбъектов - Массив - объекты, по которым требуется сформировать печатную форму;
//  ОбъектыПечати  - СписокЗначений - разметка табличных документов по печатаемым объектам:
//   * Значение      - ЛюбаяСсылка - печатаемый объект;
//   * Представление - Строка - имя области, соответствующее объекту.
//  ИмяМакета      - Строка - "Счет" или "Заказ".
//  ВыводитьПлатежныеРеквизиты - Булево - если Истина, выводит шапку с платежными реквизитами в счете.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьЗаявку(МассивОбъектов, ОбъектыПечати ) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	_ЗаявкаНаОплату.Ссылка КАК Заявка,
	               |	_ЗаявкаНаОплату.ВерсияДанных КАК ВерсияДанных,
	               |	_ЗаявкаНаОплату.ПометкаУдаления КАК ПометкаУдаления,
	               |	_ЗаявкаНаОплату.Номер КАК Номер,
	               |	_ЗаявкаНаОплату.Дата КАК Дата,
	               |	_ЗаявкаНаОплату.Проведен КАК Проведен,
	               |	_ЗаявкаНаОплату.Основание КАК Основание,
	               |	_ЗаявкаНаОплату.ЦФО КАК ЦФО,
	               |	_ЗаявкаНаОплату.СтатьяДДС КАК СтатьяДДС,
	               |	_ЗаявкаНаОплату.Инициатор КАК Инициатор,
	               |	_ЗаявкаНаОплату.СуммаПлатежа КАК СуммаПлатежа,
	               |	_ЗаявкаНаОплату.Плательщик КАК Плательщик,
	               |	_ЗаявкаНаОплату.Получатель КАК Получатель,
	               |	_ЗаявкаНаОплату.Статус КАК Статус,
	               |	_ЗаявкаНаОплату.Примечание КАК Примечание,
	               |	_ЗаявкаНаОплату.Представление КАК Представление,
	               |	_ЗаявкаНаОплату.МоментВремени КАК МоментВремени,
	               |	_ЗаявкаНаОплату.Согласователь КАК Согласователь,
	               |	_ЗаявкаНаОплату.ДатаОплаты КАК ДатаОплаты,
	               |	_ЗаявкаНаОплату.ДатаПодачи КАК ДатаПодачи,
	               |	_ЗаявкаНаОплату.ДатаТендера КАК ДатаТендера
	               |ИЗ
	               |	Документ._ЗаявкаНаОплату КАК _ЗаявкаНаОплату
	               |ГДЕ
	               |	_ЗаявкаНаОплату.Ссылка В(&МассивОбъектов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ЗаявканаОплату_СчетЗаказ";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ._ЗаявкаНаОплату.ПФ_MXL");
	
	Пока Шапка.Следующий() Цикл
		
		//Вложения = ПолучитьВложения(Шапка.Заявка);
		
		СписокФайлов=  	ПолучитьМассивОписанияПрисоединенныхФайлов(Шапка.Заявка );
		
		СтрВложения = "";
		Для Каждого ОписаниеФайла Из СписокФайлов Цикл
			
			СтрВложения =   СтрВложения + ?(ЗначениеЗаполнено(СтрВложения), "; ","")+  ОписаниеФайла.ИмяФайла ; 
			
		КонецЦикла;
		
		
		
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ОбластьМакета.Параметры.Вложения = СтрВложения;
		
		
		Струк =	_ОбщийМодульВызовСервера.ПолучитьЛимитыПоСтаьтиВЗаявке(Шапка.Заявка);
		
		СуммаПоБюджету =Струк.СуммаПоБюджету;
		ВнеБюджета = Струк.СуммаВнеБюджета;
		Лимит =  Струк.Лимит;
		ОбластьМакета.Параметры.СуммаПоБюджету= СуммаПоБюджету;
		ОбластьМакета.Параметры.ВнеБюджета = ВнеБюджета;
		ОбластьМакета.Параметры.Лимит = Лимит;
		//ОбластьМакета.Параметры.Инфо = Струк.Инфо + Символы.ПС+ Шапка.Примечание ;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Заявка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции



Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления._СтатусыЗаявок[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ._ЗаявкаНаОплату КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции


Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления._СтатусыЗаявок[НовыйСтатус];
	Заявка = ВыборкаПроверки.Ссылка;
	ТекущийСтатус = Заявка.Статус;
	Согласователь   = Заявка.Согласователь;
	Плательщик  = Заявка.Плательщик;
	
	Отказ = Ложь;
	ТекстОшибки = "";
	ПериодРегистрацииГод = Год(Заявка.Дата);
	ПериодРегистрацииМесяц = Месяц(Заявка.Дата);
	ПериодРегистрации = Дата(ПериодРегистрацииГод, ПериодРегистрацииМесяц, 1);
	
	
	Если 	НачалоМесяца(Заявка.ДатаОплаты) <>  Заявка.Основание.ПериодРегистрации  Тогда
		Отказ = Истина;
		ТекстОшибки = "У документа %Документ% статус ""%Статус%"" Нельзя установить.Дата оплаты не сооветствует дате регистрации выбранного плана КП! ";
		
		
	ИначеЕсли 	ЗначениеНовогоСтатуса  = Перечисления._СтатусыЗаявок.Отправлен  Тогда
		
		Отказ = ПроверитьОтправкиБезсогласования(Заявка, ТекстОшибки );
		
	ИначеЕсли 	ЗначениеНовогоСтатуса  = Перечисления._СтатусыЗаявок.НаСогласовании  Тогда
		
		Отказ = ПроверитьОтправкиНасогласование(Заявка, ТекстОшибки);
		
	ИначеЕсли 	ЗначениеНовогоСтатуса  =  Перечисления._СтатусыЗаявок.Согласован  Тогда
		
	Отказ =	ПроверитьВозвожностьПолучателяСогласовать(Заявка,ТекстОшибки);
	Если не Отказ Тогда
		
		Отказ =  НЕ (ТекущийСтатус =  Перечисления._СтатусыЗаявок.НаСогласовании);
		ТекстОшибки = "У документа %Документ% статус ""%Статус%"" Нельзя установить ";
	КонецЕсли;	
		
ИначеЕсли 	ЗначениеНовогоСтатуса  = Перечисления._СтатусыЗаявок.НеСогласован  Тогда
	Отказ =	ПроверитьВозвожностьПолучателяСогласовать(Заявка,ТекстОшибки);
	Если не Отказ Тогда

		Отказ =  НЕ (ТекущийСтатус =  Перечисления._СтатусыЗаявок.НаСогласовании);
		ТекстОшибки = "У документа %Документ% статус ""%Статус%"" Нельзя установить ";
	КонецЕсли;
	
	ИначеЕсли  ЗначениеНовогоСтатуса = Перечисления._СтатусыЗаявок.Оплачено  Тогда
		
		Отказ = ПроверитьВозвожностьПользователяОплатить(Заявка, ТекстОшибки = "");
		
		Если не Отказ Тогда

		Отказ = НЕ (ТекущийСтатус =  Перечисления._СтатусыЗаявок.Отправлен или  ТекущийСтатус =  Перечисления._СтатусыЗаявок.Согласован);	
		ТекстОшибки = "Текущий статус заявки не соотвествует. У документа %Документ% статус ""%Статус%"" Нельзя установить.  ";
		КонецЕсли;

		
	КонецЕсли; 		
	
	Если Отказ  Тогда
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Заявка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Заявка);
		
	КонецЕсли;
	
	Возврат Не Отказ;                                       
	
	
КонецФункции




Функция ПроверитьВозвожностьПолучателяСогласовать(Заявка, ТекстОшибки = "") Экспорт
	
	Отказ = Ложь;
	Пользователь = Пользователи.ТекущийПользователь();
	
	Если Пользователи.РолиДоступны(Метаданные.Роли.ПолныеПрава.Имя,Пользователь) Тогда
		Возврат Отказ;
	КонецЕсли ;
	
	ТекущийСтатус = Заявка.Статус;
	Согласователь   = Заявка.Согласователь;
	

	Если Заявка.Согласователь<> Пользователь и не Заявка.ПервыйСогласован и Заявка.РазбивкаПоСтатьям.Количество() = 1 Тогда 
		Отказ = Истина;	
		ТекстОшибки = "Вы не являетесь согласователем заявки. У документа %Документ% статус ""%Статус%"" Нельзя установить.  ";
	ИначеЕсли Заявка.ВторойСогласователь <> Пользователь и Заявка.ПервыйСогласован и Заявка.РазбивкаПоСтатьям.Количество() = 1 Тогда 
		Отказ = Истина;	
		ТекстОшибки = "Вы не являетесь согласователем заявки. У документа %Документ% статус ""%Статус%"" Нельзя установить.  ";
	ИначеЕсли Заявка.РазбивкаПоСтатьям.Количество() > 1 тогда
        Отказ = истина;
		ТекстОшибки = "Вы не являетесь согласователем заявки. У документа %Документ% статус ""%Статус%"" Нельзя установить.  ";
		Для каждого стр из Заявка.РазбивкаПоСтатьям  Цикл
			Если стр.Согласователь = Пользователь и не стр.ПервыйСогласовал тогда
				Отказ = ложь;
				Прервать;
			ИначеЕсли стр.ПервыйСогласовал и стр.ВторойСогласователь = Пользователь тогда
				Отказ = ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
Возврат Отказ;                                       
	
	
КонецФункции

Функция ПроверитьВозвожностьПользователяОплатить(Заявка, ТекстОшибки = "") Экспорт
    Отказ = Ложь;
	 Пользователь = Пользователи.ТекущийПользователь();

	Если Пользователи.РолиДоступны(Метаданные.Роли.ПолныеПрава.Имя,Пользователь) Тогда
		Возврат Отказ;
	КонецЕсли ;

	Организация   = Заявка.Плательщик;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_БухгалтерыОрганизации.Организация КАК Организация,
		|	_БухгалтерыОрганизации.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений._БухгалтерыОрганизации КАК _БухгалтерыОрганизации
		|ГДЕ
		|	_БухгалтерыОрганизации.Организация = &Организация
		|	И _БухгалтерыОрганизации.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Тз=  Запрос.Выполнить().Выгрузить();
	
	Если Тз.Количество() =0 Тогда
	Отказ = Истина;	
	
	ТекстОшибки = "Вы не являетесь бухгалтером полательщика заявки. У документа %Документ% статус ""%Статус%"" Нельзя установить.  ";

    КонецЕсли;
	
	Возврат Отказ;                                       
	
	
КонецФункции



Функция ПроверитьОтправкиБезсогласования(Заявка, ТекстОшибки = "") Экспорт
	
	
	ТекущийСтатус = Заявка.Статус;
	Согласователь   = Заявка.Согласователь;
	Плательщик  = Заявка.Плательщик;
	Получатель  = Заявка.Получатель;

	
	Отказ = Ложь;
	ТекстОшибки = "";
	ПериодРегистрацииГод = Год(Заявка.Дата);
	ПериодРегистрацииМесяц = Месяц(Заявка.Дата);
	ПериодРегистрации = Дата(ПериодРегистрацииГод, ПериодРегистрацииМесяц, 1);
	
//BSP-8 Редактирование заявок
//	Проверка есть в _ОбщийМодульВызовСервера.УстановитьСтатусДокументов()
//	Если ЗначениеЗаполнено(ТекущийСтатус) Тогда
//		ТекстОшибки = "  У %Документ%  уже установлен статус ";
//		Возврат Истина;  	
//	КонецЕсли;
//--
	
	Если не ЗначениеЗаполнено(Получатель) Тогда
		ТекстОшибки = "  У %Документ%  не заполнен получатель ";
		Возврат Истина;  	
	КонецЕсли;
	

	
	
	ТзПлатеж = _ОбщийМодульВызовСервера.ПолучитьПлатежСтатьиБюджета(Заявка);
	Если ТзПлатеж.Количество()= 0 Тогда 
		
		ТекстОшибки = "Платеж не запланирован в бюджете!!. Должны быть утверждены все параметры: Статья,ЦФО  и Инициатор ";
		ТекстОшибки = ТекстОшибки + Символы.ПС+ "У документа %Документ% статус ""%Статус%"" Нельзя установить.Требуется согласование ";
		
		Возврат Истина;   
		
	КонецЕсли;
	
	
	Платеж= ТзПлатеж[0];
	
	СогласовательВстатьеПлатежа = Платеж.ТребованиеКСогласованию;
	
	Если  ЗначениеЗаполнено(СогласовательВстатьеПлатежа ) Тогда
		Отказ = Истина;	
		ТекстОшибки = " У платежа есть утвержденный Согласователь. У документа %Документ% статус ""%Статус%"" Нельзя установить..Требуется согласование ";
	КонецЕсли;	

	
	
		
	Список = _ОбщийМодульВызовСервера.ПолучитьСписокУтвержденныхПолучателейПлатажа(Заявка);  
	Если Список.Количество()>0 Тогда
		
		Если Список.НайтиПоЗначению(Заявка.Получатель) = Неопределено Тогда
			
			ТекстОшибки = "Получатель не утвержден в платеже. У документа %Документ% статус ""%Статус%"" Нельзя установить.Требуется согласование";
			
			Возврат Истина;   
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ТекущийСтатус =  Перечисления._СтатусыЗаявок.ПустаяСсылка() Тогда
		Лимит = _ОбщийМодульВызовСервера. ПолучитьОстаткиЛимита(Заявка);
		Если Лимит < Заявка.СуммаПлатежа  Тогда
			
			ТекстОшибки = "У документа %Документ% статус ""%Статус%"" Нельзя установить.Исчерпан или отсутствует лимит !. Требуется согласование! ";
			Возврат Истина; 	
		КонецЕсли;  
		
	КонецЕсли;
	
	
	Возврат Отказ;                                       
	
	
КонецФункции


Функция ПроверитьОтправкиНасогласование(Заявка, ТекстОшибки = "") Экспорт
	
	СтатусДляОтправки = Перечисления._СтатусыЗаявок.ПустаяСсылка();
	
	
	ТекущийСтатус = Заявка.Статус;
	Согласователь   = Заявка.Согласователь;
	Плательщик  = Заявка.Плательщик;
		Получатель  = Заявка.Получатель;

	
	Отказ = Ложь;
	
	ПериодРегистрацииГод = Год(Заявка.Дата);
	ПериодРегистрацииМесяц = Месяц(Заявка.Дата);
	ПериодРегистрации = Дата(ПериодРегистрацииГод, ПериодРегистрацииМесяц, 1);
	
//BSP-8 Редактирование заявок
//Проверка есть в _ОбщийМодульВызовСервера.УстановитьСтатусДокументов()
//	Если ЗначениеЗаполнено(ТекущийСтатус) Тогда
//		ТекстОшибки = "  У %Документ%  уже установлен статус ";
//		Возврат Истина;  	
//	КонецЕсли;
//--
	
	Если не ЗначениеЗаполнено(Получатель) Тогда
		ТекстОшибки = "  У %Документ%  не заполнен получатель ";
		Возврат Истина;  	
	КонецЕсли;

	
	
	Если 	НачалоМесяца(Заявка.ДатаОплаты) <>  Заявка.Основание.ПериодРегистрации  Тогда
		Отказ = Истина;
		ТекстОшибки = "Дата оплаты не сооветствует периоду бюджета БДДС. У документа %Документ% статус ""%Статус%"" Нельзя установить. ";
	Иначе
		
		ТзПлатеж = _ОбщийМодульВызовСервера.ПолучитьПлатежСтатьиБюджета(Заявка);
		
		СогласовательВстатьеПлатежа = Справочники.Пользователи.ПустаяСсылка();
		
		
		Если ТзПлатеж.Количество() >  0 Тогда 
			Платеж= ТзПлатеж[0];
			СогласовательВстатьеПлатежа = Платеж.ТребованиеКСогласованию;
			
			
		КонецЕсли;
		
				
		Если не ЗначениеЗаполнено(Согласователь ) и Заявка.разбивкапостатьям.количество() = 1 Тогда
			Отказ = Истина;	
			ТекстОшибки = " Согласователь не заполнено. У документа %Документ% статус ""%Статус%"" Нельзя установить ";
			
		ИначеЕсли  ЗначениеЗаполнено(СогласовательВстатьеПлатежа) и  Согласователь <> СогласовательВстатьеПлатежа Тогда 
			
			Отказ = Истина;	
			ТекстОшибки = " Согласователь в заявке не соответствует утвержденному в платеже. У  %Документ% статус ""%Статус%"" Нельзя установить ";
			
			
		ИначеЕсли   не ЗначениеЗаполнено(СогласовательВстатьеПлатежа) и Заявка.разбивкапостатьям.количество() = 1  и  не  _ОбщийМодульВызовСервера.ВходитьВгруппуСогласователейОрганизации(Согласователь,Плательщик) Тогда
			
			Отказ = Истина;	
			ТекстОшибки = "Согласователь не входит в группу согласователей плательщика!.У документа %Документ% статус ""%Статус%"" Нельзя установить ";
			
		Иначе	
			Отказ = НЕ (ТекущийСтатус =  Перечисления._СтатусыЗаявок.ПустаяСсылка() или  ТекущийСтатус =  Перечисления._СтатусыЗаявок.НеСогласован);	
			ТекстОшибки = "Текущий Статус не пустой. У документа %Документ% статус ""%Статус%"" Нельзя установить ";
		КонецЕсли;
		
		
		
		
	КонецЕсли;	
	
	Возврат  Отказ;                                       
	
	
КонецФункции


Функция ПолучитьВложения(ВладелецФайла) Экспорт
	
	Вложения = "";
	
	Если ВладелецФайла=Неопределено или ВладелецФайла = Документы._ЗаявкаНаОплату.ПустаяСсылка() Тогда
		Возврат Вложения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_ЗаявкаНаОплатуПрисоединенныеФайлы.Наименование КАК Наименование
	|ИЗ
	|	Справочник._ЗаявкаНаОплатуПрисоединенныеФайлы КАК _ЗаявкаНаОплатуПрисоединенныеФайлы
	|ГДЕ
	|	_ЗаявкаНаОплатуПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Вложения = Вложения+  СокрЛП(ВыборкаДетальныеЗаписи. Наименование)+ "; ";
	КонецЦикла;
	
	Возврат Вложения;
	
КонецФункции

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	Наименование = "Заявка № "+ СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Данные.Номер,"0");
	Дата  = Формат(Данные.Дата, "ДЛФ=D");
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2 '"), Наименование, Дата);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

