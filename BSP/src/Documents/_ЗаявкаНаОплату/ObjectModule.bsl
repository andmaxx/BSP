
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Движения._ДвиженияДенежныхСредств.Записывать = Истина;
	
	Если статус = Перечисления._СтатусыЗаявок.Согласован
		или  статус = Перечисления._СтатусыЗаявок.Оплачено
		Или  статус = Перечисления._СтатусыЗаявок.НаСогласовании
		Или  статус = Перечисления._СтатусыЗаявок.Отправлен  Тогда
	//////НК	
		Для каждого стр из РазбивкаПоСтатьям Цикл	
			Движение = Движения._ДвиженияДенежныхСредств.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период =  Макс(ДатаПодачи,ДатаОплаты,Основание.ПериодРегистрации+1);
			Движение.Инициатор =Инициатор;
			Движение.Плательщик = Плательщик;
			Движение.ЦФО = стр.ЦФО;
			Движение.СтатьяДДС = стр.СтатьяДДС;
			Движение.КалендарныйПлатеж = Основание;
			Движение.СуммаПлатежа = стр.Сумма;
		КонецЦикла;
	//////	
	ИначеЕсли статус = Перечисления._СтатусыЗаявок.НеСогласован Тогда
		Движения._ДвиженияДенежныхСредств.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка._КалендарныеПлатежи") Тогда
		// Заполнение шапки
		Основание = ДанныеЗаполнения.Ссылка;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	
	Статус = Перечисления._СтатусыЗаявок.ПустаяСсылка();
	Инициатор = Пользователи.ТекущийПользователь();
	
	ДатаПлатежа = Дата(1, 1, 1);
	//ЖелательнаяДатаПлатежа = Дата(1, 1, 1);
	//ДокументОснование = Неопределено;
	//
	//ПоказательТипа = "";
	
КонецПроцедуры


Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления._СтатусыЗаявок[НовыйСтатус];
	Если   ЗначениеНовогоСтатуса = Перечисления._СтатусыЗаявок.НаСогласовании Тогда
		ДатаПодачи = ТекущаяДатаСеанса();
		
	Иначеесли  ЗначениеНовогоСтатуса = Перечисления._СтатусыЗаявок.Отправлен  Тогда
		ДатаПодачи = ТекущаяДатаСеанса();
		
	КонецЕсли;
	//++
	Если ЗначениеНовогоСтатуса = перечисления._СтатусыЗаявок.Согласован и РазбивкаПоСтатьям.Количество() = 1 тогда
	
		Если ЗначениеНовогоСтатуса = перечисления._СтатусыЗаявок.Согласован и ЗначениеЗаполнено(ВторойСогласователь) и не ПервыйСогласован тогда
			ПервыйСогласован = истина;
			ЗначениеНовогоСтатуса =  перечисления._СтатусыЗаявок.НаСогласовании;
		КонецЕсли;
		Статус = ЗначениеНовогоСтатуса;
	ИначеЕсли ЗначениеНовогоСтатуса = перечисления._СтатусыЗаявок.Согласован и РазбивкаПоСтатьям.Количество() <> 1 тогда
		//нужно установить статус Согласован только в тех строках, где этот пользователь.
		Для каждого стр из РазбивкаПоСтатьям Цикл
			Если стр.Согласователь = ПараметрыСеанса.ТекущийПользователь и не стр.ПервыйСогласовал тогда
				 стр.ПервыйСогласовал = истина;
				 Если не значениеЗаполнено(стр.ВторойСогласователь) тогда
					 стр.ВторойСогласовал = истина;
				 КонецЕсли;
			ИначеЕсли стр.ПервыйСогласовал и стр.ВторойСогласователь = ПараметрыСеанса.ТекущийПользователь тогда
				 стр.ВторойСогласовал = истина;
			КонецЕсли;
		КонецЦикла;
		//нужно проверить: если согласовали все вторые пользователи, то поменять статус у заявки
		ПараметрыОТбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВторойСогласовал", истина);
		НС = РазбивкаПОСтатьям.НайтиСтроки(ПараметрыОтбора);
		Если НС.КОличество() = РазбивкаПОСтатьям.Количество() тогда
			//все вторые согласовали - заявка согласована
			Статус = перечисления._СтатусыЗаявок.Согласован;
		КонецЕсли;
	Иначе
		Статус = ЗначениеНовогоСтатуса;
	КонецЕсли;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//++
	Если НЕ проверкаНаЗаполнениеНомераСтрокСчетов() тогда
		отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить номера строк счетов", ,,Отказ);
	КонецЕсли;	
	//--	
	
	//BSP-3 Удалять можно только «неоплаченные» заявки 
	Если ПометкаУдаления И НЕ Ссылка.ПометкаУдаления Тогда
		Если Статус = Перечисления._СтатусыЗаявок.Оплачено Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Удаление оплаченных заявок запрещено", ,,Отказ);		
		КонецЕсли;
	КонецЕсли;
	//
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения и  не Статус.Пустая()  Тогда 
		Пользователь =  Пользователи.ТекущийПользователь();
		
		Если не Пользователи.РолиДоступны(Метаданные.Роли.ПолныеПрава.Имя,Пользователь) Тогда
			отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отказ в доступе отмены проведения", ,,Отказ);
		Иначе
			УстановитьСнятьПометкуУдалениЭлектроннныхПисьм();	
		КонецЕсли ;
	ИначеЕсли  РежимЗаписи = РежимЗаписиДокумента.Запись тогда
		УстановитьСнятьПометкуУдалениЭлектроннныхПисьм();
	КонецЕсли ;
	
	//++
	СтатьиДляСписка = "";
	ЦФОДляСписка = "";
	ПодразделенияДляСписка = "";
	Для каждого стр из РазбивкаПоСтатьям Цикл
		  СтатьиДляСписка = СтатьиДляСписка + Строка(стр.СтатьяДДС) + "; " ;
		  ЦФОДляСписка = ЦФОДляСписка + Строка(стр.ЦФО) + "; " ;
		  ПодразделенияДляСписка = ПодразделенияДляСписка + Строка(стр.Подразделение) + "; " ;
	КонецЦикла;
	//--
КонецПроцедуры

Функция проверкаНаЗаполнениеНомераСтрокСчетов()
	Проверка = истина;
	Если РазбивкаПоСтатьям.Количество() > 1 тогда
		Для каждого стр из РазбивкаПоСтатьям Цикл
			Если не ЗначениеЗаполнено(стр.НомерВСчете) тогда
				Проверка = ложь;
				прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	возврат Проверка
КонецФункции

Процедура ПриЗаписи(Отказ)
	Если ЗначениеЗаполнено(Статус) Тогда
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	_ИсторияИзмененияСтатуса.Пользователь КАК Пользователь
		//|ИЗ
		//|	РегистрСведений._ИсторияИзмененияСтатуса КАК _ИсторияИзмененияСтатуса
		//|ГДЕ
		//|	_ИсторияИзмененияСтатуса.Заявка = &Заявка
		//|	И _ИсторияИзмененияСтатуса.Статус = &Статус";
		//
		//Запрос.УстановитьПараметр("Заявка", Ссылка);
		//Запрос.УстановитьПараметр("Статус", Статус);
		//
		//Тз = Запрос.Выполнить().Выгрузить();
		//
		//
		//Если Тз.Количество() = 0 Тогда
			
			Запись =	РегистрыСведений._ИсторияИзмененияСтатуса.СоздатьМенеджерЗаписи();
			Запись.Период = ТекущаяДата();
			Запись.ДатаУстановки = ТекущаяДата();
			Запись.Заявка = Ссылка;
			Запись.Пользователь = Пользователи.ТекущийПользователь();
			Запись.Статус = Статус;
			запись.ПервоеСогласование = ссылка.ПервыйСогласован;
			Запись.Записать();
			
		//КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьСнятьПометкуУдалениЭлектроннныхПисьм()
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Предмет
	|	И ПредметыПапкиВзаимодействий.Взаимодействие.ПометкаУдаления = &ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	Запрос.УстановитьПараметр("ПометкаУдаления", Не ПометкаУдаления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			
			Взаимодействие = Выборка.Взаимодействие.ПолучитьОбъект();
			Взаимодействие.УстановитьПометкуУдаления(ПометкаУдаления);
			Взаимодействие.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры
