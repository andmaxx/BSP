

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПриСозданииНаСервереФормыСписка(ЭтотОбъект, "Список");
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.Комментарий.Видимость = Ложь;
		Элементы.Ответственный.Видимость = Ложь;
	КонецЕсли;
	
	Если не _ОбщийМодульВызовСервера.ЕстьДоступУстановитьСтатус(Перечисления._СтатусыЗаявок.Оплачено) Тогда 
	Отказ = Истина;	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Отказано в доступе!");

	КонецЕсли;
//КП= _ОбщийМодульВызовСервера.ПолучитьПоследнийКП();

КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
//КППриИзменении(Неопределено);

 УстановитьОтбор();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПриПолученииДанныхНаСервере(Настройки, Строки);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Дата.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Номер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Плательщик.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Инициатор.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СуммаПлатежа.Имя);

		
	
	
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Статус.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПустаяСсылка");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиент.ОткрытьОтчетПоПроблемамИзСписка(ЭтотОбъект, "Список", Поле, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

#КонецОбласти







&НаКлиенте
Процедура УстановитьСтатусОплачено(Команда)
	
	//++ Гаранин. Проверим, есть ли в заявке галочка, что требуется платежка, а файла нет
	
		мСтрок = Элементы.Список.ВыделенныеСтроки;
		Для Каждого СтрокаСписка из мСтрок цикл
			Если НужнаПлатежкаАееНет(СтрокаСписка) Тогда
				Предупреждение("В документе " + СтрокаСписка + " требуется вложить платежное поручение. Сделайте, и повторите операцию позднее");
				Возврат;
			КонецЕсли;
		КонецЦикла;
	
	//--
	
	
	ВыделенныеСтроки = _ОбщийМодульКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заявок будет установлен статус ""Оплачено"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусКОплатеЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	

КонецПроцедуры

//++Гаранин
Функция НужнаПлатежкаАееНет(СсылкаДока)
	
	Если НЕ СсылкаДока.ТребуетсяПлатежноеПоручение  Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	_ЗаявкаНаОплатуПрисоединенныеФайлы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник._ЗаявкаНаОплатуПрисоединенныеФайлы КАК _ЗаявкаНаОплатуПрисоединенныеФайлы
	               |ГДЕ
	               |	_ЗаявкаНаОплатуПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	               |	И _ЗаявкаНаОплатуПрисоединенныеФайлы.ВладелецФайла = &Док";
	Запрос.УстановитьПараметр("Док", СсылкаДока);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	
	
КонецФункции


&НаКлиенте
Процедура УстановитьСтатусКОплатеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    ОбработанныеДокументы = _ОбщийМодульВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Оплачено");
    
    _ОбщийМодульКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, ОбработанныеДокументы, ВыделенныеСтроки.Количество(), НСтр("ru='Оплачено'"));

КонецПроцедуры

&НаКлиенте
Процедура ТумблерПриИзменении(Элемент)
УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор()

	Если Тумблер = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Тумблер", Тумблер, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	ИначеЕсли Тумблер = 1 Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Тумблер", Тумблер, ВидСравненияКомпоновкиДанных.Равно,, Истина);
    Иначе
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Тумблер", 0, ВидСравненияКомпоновкиДанных.БольшеИлиРавно,, Истина);
	КонецЕсли;

	

КонецПроцедуры

&НаКлиенте
Процедура КППриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Основание", КП, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(КП));
	

КонецПроцедуры

&НаКлиенте
Процедура КПОчистка(Элемент, СтандартнаяОбработка)
	
	Если КП = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяКолонки = Элементы.Список.ТекущийЭлемент.Имя;
	ИмяКолонки = СтрЗаменить(ИмяКолонки, "Список", "");
	Если ИмяКолонки = "ОригиналПолучен" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначениеАктивнойЯчейки = Элементы.Список.ТекущиеДанные[ИмяКолонки];
		Элементы.Список.ТекущиеДанные[ИмяКолонки] = НЕ ЗначениеАктивнойЯчейки;
		ЗафиксироватьИзменениеОригинала(ВыбраннаяСтрока);
		
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьИзменениеОригинала(ДокСсылка)
	
	
	ДокОбъект = ДокСсылка.ПолучитьОбъект();
	ДокОбъект.ОригиналПолучен = НЕ ДокОбъект.ОригиналПолучен;
	ДокОбъект.Записать();
	
КонецПроцедуры

