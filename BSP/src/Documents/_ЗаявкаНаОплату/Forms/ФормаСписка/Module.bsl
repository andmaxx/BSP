///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	БыстрыйОтбор = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.Отбор);
	Если ЗначениеЗаполнено(БыстрыйОтбор) Тогда
		УстановитьОтборПриСозданииНаСервере(БыстрыйОтбор);
		Параметры.Отбор.Очистить();
	КонецЕсли;

	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПриСозданииНаСервереФормыСписка(ЭтотОбъект, "Список");
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.Комментарий.Видимость = Ложь;
		Элементы.Ответственный.Видимость = Ложь;
	КонецЕсли;
	
	//Элементы.УстановитьСтатусНаСогласовании.Доступность =_ОбщийМодульВызовСервера.ЕстьДоступУстановитьСтатус(Перечисления._СтатусыЗаявок.НаСогласовании);
	//Элементы.УстановитьСтатусОтправлен.Доступность      =_ОбщийМодульВызовСервера.ЕстьДоступУстановитьСтатус(Перечисления._СтатусыЗаявок.Отправлен);
	//

	Элементы.УстановитьСтатусНеСогласован.Доступность   =_ОбщийМодульВызовСервера.ЕстьДоступУстановитьСтатус(Перечисления._СтатусыЗаявок.НеСогласован);
	Элементы.УстановитьСтатусОплачено.Доступность       =_ОбщийМодульВызовСервера.ЕстьДоступУстановитьСтатус(Перечисления._СтатусыЗаявок.Оплачено);
	Элементы.УстановитьСтатусСогласован.Доступность     =_ОбщийМодульВызовСервера.ЕстьДоступУстановитьСтатус(Перечисления._СтатусыЗаявок.Согласован);

	ТекущийПользователь = пользователи.ТекущийПользователь();
	
	ЗаполнитьПериодРегистрациНасервере();
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
   КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПриПолученииДанныхНаСервере(Настройки, Строки);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПериодРегистрациНасервере()
	ПериодРегистрации= "";
	Если  ЗначениеЗаполнено(КП) Тогда
		Период = КП.ПериодРегистрации;
		ПериодРегистрации = ПредставлениеПериода( НачалоМесяца(Период),КонецМесяца(Период));
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Дата.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Номер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Плательщик.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Инициатор.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СуммаПлатежа.Имя);

		
	
	
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Статус.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПустаяСсылка");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиент.ОткрытьОтчетПоПроблемамИзСписка(ЭтотОбъект, "Список", Поле, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры


&НаКлиенте
Процедура Инициатор1ПриИзменении(Элемент)

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Инициатор", Инициатор, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Инициатор));

КонецПроцедуры

&НаКлиенте
Процедура Инициатор1Очистка(Элемент, СтандартнаяОбработка)
		Если Инициатор = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура КалендарныеПлатежиПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Основание", КП, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(КП));
	ЗаполнитьПериодРегистрациНасервере();

КонецПроцедуры

&НаКлиенте
Процедура КалендарныеПлатежиОчистка(Элемент, СтандартнаяОбработка)
	Если КП = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	ЗаполнитьПериодРегистрациНасервере();

КонецПроцедуры


&НаКлиенте
Процедура СтатусЗаявкиПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Статус));
	

КонецПроцедуры

&НаКлиенте
Процедура СтатусЗаявкиОчистка(Элемент, СтандартнаяОбработка)
		Если Статус = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти



&НаСервере
Процедура УстановитьОтборПриСозданииНаСервере(БыстрыйОтбор)
	
	Для Каждого ЭлементОтбора Из БыстрыйОтбор Цикл
		
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияСписка = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияСписка = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, ЭлементОтбора.Ключ, ЭлементОтбора.Значение, ВидСравненияСписка,, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеСогласован(Команда)
	
	ВыделенныеСтроки = _ОбщийМодульКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заявок будет установлен статус ""Не согласован"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусНеСогласованаЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНаСогласовании(Команда)
	
	ВыделенныеСтроки = _ОбщийМодульКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заявок будет установлен статус ""На согласовании"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусНаСогласованииЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	

	
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьСтатусОплачено(Команда)
	ВыделенныеСтроки = _ОбщийМодульКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заявок будет установлен статус ""Оплачено"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусКОплатеЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	

КонецПроцедуры



&НаКлиенте
Процедура УстановитьСтатусОтправлен(Команда)
	ВыделенныеСтроки = _ОбщийМодульКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У заявки  будет установлен статус ""Отправлен"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусОтправленЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	

КонецПроцедуры


&НаКлиенте
Процедура УстановитьСтатусСогласован(Команда)
	
	ВыделенныеСтроки = _ОбщийМодульКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	
	ТекстВопроса = НСтр("ru='У заявки будет установлен статус ""Согласован"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСогласованЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьСтатусОтправленЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    ОбработанныеДокументы = _ОбщийМодульВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Отправлен");
    
    _ОбщийМодульКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, ОбработанныеДокументы, ВыделенныеСтроки.Количество(), НСтр("ru='Отправлен'"));

КонецПроцедуры



&НаКлиенте
Процедура УстановитьСтатусСогласованЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    ОбработанныеДокументы = _ОбщийМодульВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Согласован");
    
    _ОбщийМодульКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, ОбработанныеДокументы, ВыделенныеСтроки.Количество(), НСтр("ru='Согласован'"));

КонецПроцедуры




&НаКлиенте
Процедура УстановитьСтатусНаСогласованииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    ОбработанныеДокументы = _ОбщийМодульВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "НаСогласовании");
    
    _ОбщийМодульКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, ОбработанныеДокументы, ВыделенныеСтроки.Количество(), НСтр("ru='На Согласовании'"));

КонецПроцедуры


&НаКлиенте
Процедура УстановитьСтатусНеСогласованаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    ОбработанныеДокументы = _ОбщийМодульВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "НеСогласован");
    
    _ОбщийМодульКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, ОбработанныеДокументы, ВыделенныеСтроки.Количество(), НСтр("ru='Не согласован'"));

КонецПроцедуры


&НаКлиенте
Процедура УстановитьСтатусКОплатеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    ОбработанныеДокументы = _ОбщийМодульВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Оплачено");
    
    _ОбщийМодульКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, ОбработанныеДокументы, ВыделенныеСтроки.Количество(), НСтр("ru='Оплачено'"));

КонецПроцедуры

&НаКлиенте
Процедура МоиЗаявки(Команда)

	ПоказатьМоиЗаявки();	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМоиЗаявки()

	Инициатор = ТекущийПользователь;
	Инициатор1ПриИзменении(НЕОПРЕДЕЛЕНО);
	                       
КонецПроцедуры


&НаКлиенте
Процедура МоиЗаявкиСогласователя(Команда)
	Инициатор = ТекущийПользователь;
	Инициатор1ПриИзменении(НЕОПРЕДЕЛЕНО);

КонецПроцедуры


&НаКлиенте
Процедура Согласователь1ПриИзменении(Элемент)
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Согласователь", Согласователь, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Инициатор));

КонецПроцедуры


&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
Если копирование = истина тогда
 отказ = Истина;
КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Плательщик1Очистка(Элемент, СтандартнаяОбработка)
	Если Плательщик= Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура Плательщик1ПриИзменении(Элемент)
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Плательщик", Плательщик, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Плательщик));

КонецПроцедуры

