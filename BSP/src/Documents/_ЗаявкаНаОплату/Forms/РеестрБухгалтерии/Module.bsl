///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	БыстрыйОтбор = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.Отбор);
	Если ЗначениеЗаполнено(БыстрыйОтбор) Тогда
		УстановитьОтборПриСозданииНаСервере(БыстрыйОтбор);
		Параметры.Отбор.Очистить();
	КонецЕсли;

	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПриСозданииНаСервереФормыСписка(ЭтотОбъект, "Список");
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.Комментарий.Видимость = Ложь;
		Элементы.Ответственный.Видимость = Ложь;
	КонецЕсли;
	
	//Элементы.УстановитьСтатусНаСогласовании.Доступность =_ОбщийМодульВызовСервера.ЕстьДоступУстановитьСтатус(Перечисления._СтатусыЗаявок.НаСогласовании);
	//Элементы.УстановитьСтатусОтправлен.Доступность      =_ОбщийМодульВызовСервера.ЕстьДоступУстановитьСтатус(Перечисления._СтатусыЗаявок.Отправлен);
	//

	ТекущийПользователь = пользователи.ТекущийПользователь();
	
	ЗаполнитьПериодРегистрациНасервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьОстатки();		

	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПриПолученииДанныхНаСервере(Настройки, Строки);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПериодРегистрациНасервере()
	ПериодРегистрации= "";
	Если  ЗначениеЗаполнено(КП) Тогда
		Период = КП.ПериодРегистрации;
		ПериодРегистрации = ПредставлениеПериода( НачалоМесяца(Период),КонецМесяца(Период));
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Дата.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Номер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Плательщик.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Инициатор.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СуммаПлатежа.Имя);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиент.ОткрытьОтчетПоПроблемамИзСписка(ЭтотОбъект, "Список", Поле, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры


&НаКлиенте
Процедура Инициатор1ПриИзменении(Элемент)

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Инициатор", Инициатор, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Инициатор));

КонецПроцедуры

&НаКлиенте
Процедура Инициатор1Очистка(Элемент, СтандартнаяОбработка)
		Если Инициатор = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура КалендарныеПлатежиПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Основание", КП, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(КП));
	ЗаполнитьПериодРегистрациНасервере();

КонецПроцедуры

&НаКлиенте
Процедура КалендарныеПлатежиОчистка(Элемент, СтандартнаяОбработка)
	Если КП = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	ЗаполнитьПериодРегистрациНасервере();

КонецПроцедуры


// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти



&НаСервере
Процедура УстановитьОтборПриСозданииНаСервере(БыстрыйОтбор)
	
	Для Каждого ЭлементОтбора Из БыстрыйОтбор Цикл
		
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияСписка = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияСписка = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, ЭлементОтбора.Ключ, ЭлементОтбора.Значение, ВидСравненияСписка,, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Согласователь1ПриИзменении(Элемент)
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Согласователь", Согласователь, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Инициатор));

КонецПроцедуры


&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
Если копирование = истина тогда
 отказ = Истина;
КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Плательщик1Очистка(Элемент, СтандартнаяОбработка)
	Если Плательщик= Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура Плательщик1ПриИзменении(Элемент)
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Плательщик", Плательщик, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Плательщик));

КонецПроцедуры

&НаКлиенте
Процедура ВидРеестраПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор()

	Если Тумблер = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Тумблер", Тумблер, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	ИначеЕсли Тумблер = 1 Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Тумблер", Тумблер, ВидСравненияКомпоновкиДанных.Равно,, Истина);
    Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Тумблер", 0, ВидСравненияКомпоновкиДанных.БольшеИлиРавно,, Истина);
	КонецЕсли;

	

КонецПроцедуры

&НаСервере
Процедура ОбновитьОстатки()
	
	Если ЗначениеЗаполнено(Элементы.Список.ТекущаяСтрока) Тогда
		Струк =	_ОбщийМодульВызовСервера.ПолучитьЛимитыПоСтатьиВЗаявкеДляСписка(Элементы.Список.ТекущаяСтрока);
		БюджетныйЛимит =Струк.БюджетныйЛимит;
		Исчерпано =Струк.Исчерпано;
		Остаток =Струк.Остаток;
	КонецЕсли;
		
КонецПроцедуры
