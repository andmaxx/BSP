

// Устанавливает статус для списка документов
//
// Параметры:
// 		МассивДокументов - Массив - Массив документов
// 		НовыйСтатус - Строка - Имя нового статуса для документов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
// 		Число - Количество документов у которых был изменен статус.
//
// ВАЖНО. При использования процедуры для каждого типа документа из массива должны быть объявлены функции:
// В модуле менеджера документа:
// 		Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
// 		Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
// В модуле объекта документа:
// 		Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
//
Функция УстановитьСтатусДокументов(Знач МассивДокументов, Знач НовыйСтатус, Знач ДополнительныеПараметры=Неопределено) Экспорт
	
	ОбработанныеДокументы = Новый Массив();
	
	
	// Получение шаблонов сообщений стандартных ошибок
	ШаблонОшибкиСтатусСовпадает   = НСтр("ru='Документу %Документ% уже присвоен статус ""%Статус%""'");
	ШаблонОшибкиНеПроведен        = НСтр("ru='Документ %Документ% не проведен. Невозможно изменить статус'");
	ШаблонОшибкиПомеченНаУдаление = НСтр("ru='Документ %Документ% помечен на удаление. Невозможно изменить статус'");
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
	
	// Получение исключаемых типов
	МассивИсключаемыхТипов = Новый Массив;
	ЗаблокироватьДляРедактирования = Истина;
	ТребуетсяСогласование =  ложь;
	Если ДополнительныеПараметры <> Неопределено   Тогда
		
		
		Если  ДополнительныеПараметры.Свойство("ИсключаемыеТипы") Тогда
			
			МассивИсключаемыхТипов = ДополнительныеПараметры.ИсключаемыеТипы;
			
		КонецЕсли;
		
		//BSP-8 Ошибка
		Если ДополнительныеПараметры.Свойство("ЗаблокироватьДляРедактирования") Тогда
			ДополнительныеПараметры.Свойство("ЗаблокироватьДляРедактирования",ЗаблокироватьДляРедактирования);	
		КонецЕсли; 
		
	КонецЕсли;

	// BSP-1 добавление этапов оплаты
	//удаление этапов
	МассивКУдалению = Новый Массив;
	Для Каждого СтрМассивДокументов Из МассивДокументов Цикл
		Если 
			ТипЗнч(СтрМассивДокументов) = Тип("ДокументСсылка._ЗаявкаНаОплату") 
			И ЗначениеЗаполнено(СтрМассивДокументов.ОсновнаяЗаявка) 
		Тогда	
			 МассивКУдалению.Добавить(СтрМассивДокументов);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрМассивКУдалению Из МассивКУдалению Цикл
		МассивДокументов.Удалить(СтрМассивКУдалению);	
	КонецЦикла;
	
	//добавление этапов
	МассивКДобавлению = Новый Массив;
	Для Каждого СтрМассивДокументов Из МассивДокументов Цикл
		Если 
			ТипЗнч(СтрМассивДокументов) = Тип("ДокументСсылка._ЗаявкаНаОплату") 
			И СтрМассивДокументов.ЭтапыОплаты 
			И НЕ ЗначениеЗаполнено(СтрМассивДокументов.ОсновнаяЗаявка) 
		Тогда	
			 МассивКДобавлению.Добавить(СтрМассивДокументов);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрМассивКДобавлению Из МассивКДобавлению Цикл
		МассивЭтапов = ПолучитьТаблицуЭтаповОплат(СтрМассивКДобавлению).ВыгрузитьКолонку("Заявка");
		Для Каждого	СтрМассивЭтапов Из МассивЭтапов Цикл
			Если СтрМассивКДобавлению = СтрМассивЭтапов Тогда 
				Продолжить;
			КонецЕсли;
			МассивДокументов.Добавить(СтрМассивЭтапов);
		КонецЦикла;
	КонецЦикла;
	//
	
	// Получение соответствие типов документов из массива документов разных типов
	СоответствиеТипов = РазложитьМассивСсылокПоТипам(МассивДокументов);
	
	
	Для Каждого СоставДокументов Из СоответствиеТипов Цикл
		
		// Пропуск документов исключаемого типа
		Если МассивИсключаемыхТипов.Найти(СоставДокументов.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Получение менеджера документов данного типа
		МенеджерДокументов = Документы[Метаданные.НайтиПоТипу(СоставДокументов.Ключ).Имя];
		
		// Получение массива ссылок документов данного типа
		МассивСсылок = СоставДокументов.Значение;
		
		// Формирование запроса
		Запрос = МенеджерДокументов.СформироватьЗапросПроверкиПриСменеСтатуса(МассивСсылок, НовыйСтатус, ДополнительныеПараметры);
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.Пустой() Тогда
			Возврат 0;
		КонецЕсли;
		
		// Цикл обхода выборки
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Универсальные проверки
			Если Выборка.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиПомеченНаУдаление, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;

			Если Не Выборка.Проведен Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиНеПроведен, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;

//BSP-8 Редактирование заявок
//
			Если Выборка.СтатусСовпадает И НЕ ДополнительныеПараметры.Свойство("СтатусСогласования") Тогда
	
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиСтатусСовпадает, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Выборка.ПредставлениеНовогоСтатуса);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				Продолжить;
	
			КонецЕсли;
//			Если Выборка.СтатусСовпадает Тогда
//
//				ТекстОшибки = СтрЗаменить(ШаблонОшибкиСтатусСовпадает, "%Документ%", Выборка.Представление);
//				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Выборка.ПредставлениеНовогоСтатуса);
//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
//				Продолжить;
//
//			КонецЕсли;
//--
			
			// Проверки уникальные для каждого из типов документов
			
			//BSP-8 Редактирование заявок
			Если НЕ Выборка.СтатусСовпадает И Не МенеджерДокументов.ПроверкаПередСменойСтатуса(Выборка, НовыйСтатус, ДополнительныеПараметры) Тогда
			//Если Не МенеджерДокументов.ПроверкаПередСменойСтатуса(Выборка, НовыйСтатус, ДополнительныеПараметры) Тогда
			//--
				Продолжить;
			КонецЕсли;
			
					// Захват объекта для редактирования
					
					Если ЗаблокироватьДляРедактирования  Тогда 
						
						Попытка
							ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);   //Санчес
						Исключение
							ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Выборка.Представление);
							ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							ТекстОшибки = ТекстОшибки+ Символы.ПС + "Повторите попытку!"; 
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
							Продолжить;
						КонецПопытки;
					КонецЕсли;
			
			// Получение объекта документа
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Установка статуса документа
			Если Не Объект.УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Тогда
				Продолжить;
			КонецЕсли;
			
			// Запись документа
			Попытка
				Объект.Записать(?(Выборка.ЗаписьПроведением, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				ОбработанныеДокументы.Добавить(Выборка.Ссылка);
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			КонецПопытки
			
		КонецЦикла; // выборки документов данного типа
		
	КонецЦикла; // обхода соответствия типов
	
	Возврат ОбработанныеДокументы;
	
КонецФункции // УстановитьСтатусДокументов()

Процедура ИзменитьОригиналПолучен(Документ) Экспорт
	Объект = Документ.ПолучитьОбъект();
	Объект.ИзменитьОригиналПолучен();
			
	// Запись документа
	Попытка
		Объект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Документ);
	КонецПопытки;		
КонецПроцедуры

// Возвращает соответствие массивов документов по типам
//
// Параметры:
// 		МассивСсылок - Массив - Массив ссылок.
//
// Возвращаемое значение:
// 		Соответствие - Ключ: Тип; значение: Массив ссылок на документы.
//
Функция РазложитьМассивСсылокПоТипам(МассивСсылок) Экспорт
	
	СоответствиеТипов = Новый Соответствие;
	
	Для Счетчик = 0 По МассивСсылок.Количество() -1 Цикл
		
		ТипСсылки = ТипЗнч(МассивСсылок[Счетчик]);
		Массив = СоответствиеТипов[ТипСсылки];
		Если Массив = Неопределено Тогда
			Массив = Новый Массив;
			СоответствиеТипов.Вставить(ТипСсылки, Массив);
		КонецЕсли;
		Массив.Добавить(МассивСсылок[Счетчик]);
		
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции // РазложитьМассивСсылокПоТипам

Функция ПолучитьПоследнийКП()   Экспорт
	
	КП= Документы._КалендарныеПлатежи.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	_КалендарныеПлатежи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ._КалендарныеПлатежи КАК _КалендарныеПлатежи
		|
		|УПОРЯДОЧИТЬ ПО
		|	_КалендарныеПлатежи.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	КП=  ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
Возврат КП;	

КонецФункции // ПолучитПоследныйКП()

Функция ПолучитьКП(Период,Плательщик)   Экспорт
	
	КП= Документы._КалендарныеПлатежи.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	_КалендарныеПлатежи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ._КалендарныеПлатежи КАК _КалендарныеПлатежи
		|ГДЕ
		|	_КалендарныеПлатежи.ПериодРегистрации = &ПериодРегистрации
		|	И _КалендарныеПлатежи.Плательщик = &Плательщик
		|
		|УПОРЯДОЧИТЬ ПО
		|	_КалендарныеПлатежи.Дата УБЫВ";
	
	
	Запрос.УстановитьПараметр("ПериодРегистрации",НачалоМесяца(Период));
	Запрос.УстановитьПараметр("Плательщик",Плательщик);


	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	КП=  ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
Возврат КП;	

КонецФункции // ПолучитПоследныйКП()




Функция ВходитьВгруппуСогласователейОрганизации(Пользователь,Организация) Экспорт 
	 
	 Результат = Ложь;
	 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_СогласователиОрганизации.Организация КАК Организация
		|ИЗ
		|	РегистрСведений._СогласователиОрганизации КАК _СогласователиОрганизации
		|ГДЕ
		|	_СогласователиОрганизации.Организация = &Организация
		|	И _СогласователиОрганизации.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Результат = Истина;
КонецЦикла;
	
	

 Возврат Результат;


 КонецФункции 

Процедура ПрверкаУникальностьКП (КПСсылка, ПериодРегистрации,Плательщик,Отказ)  Экспорт

		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_КалендарныеПлатежи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ._КалендарныеПлатежи КАК _КалендарныеПлатежи
		|ГДЕ
		|	_КалендарныеПлатежи.Ссылка <> &Ссылка
		|	И _КалендарныеПлатежи.ПериодРегистрации = &ПериодРегистрации
		|	И _КалендарныеПлатежи.Плательщик = &Плательщик";
	
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Ссылка",КПСсылка );
	Запрос.УстановитьПараметр("Плательщик", Плательщик);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	Отказ = Истина;
	
	ТекстОшибки = " План не записан. У плательщика уже есть план платежей на этот период регистрации ";
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,,Отказ);
	КонецЕсли;
	
	

КонецПроцедуры

Функция ЕстьДоступУстановитьСтатус(Статус)  Экспорт
	
	Результат = Ложь;
	
	Пользователь =  Пользователи.ТекущийПользователь();
	
		
	Если Пользователи.РолиДоступны(Метаданные.Роли.ПолныеПрава.Имя,Пользователь) Тогда
	Возврат Истина;
	КонецЕсли ;
		
	
	Если  Статус = Перечисления._СтатусыЗаявок.НаСогласовании Тогда
	Результат = истина;			
	ИначеЕсли Статус = Перечисления._СтатусыЗаявок.НеСогласован Тогда
		Результат=	Пользователи.РолиДоступны(Метаданные.Роли._УстановитьСтатусСогласован.Имя,Пользователь);
		
	ИначеЕсли Статус = Перечисления._СтатусыЗаявок.Оплачено Тогда
		
		Результат=	Пользователи.РолиДоступны(Метаданные.Роли._УстановитьСтатусОплачено.Имя,Пользователь);
		
		
	ИначеЕсли Статус = Перечисления._СтатусыЗаявок.Отправлен Тогда	
		Результат = истина;
		
	ИначеЕсли Статус = Перечисления._СтатусыЗаявок.Согласован Тогда	
	Результат=	Пользователи.РолиДоступны(Метаданные.Роли._УстановитьСтатусСогласован.Имя,Пользователь);

	КонецЕсли;	

Возврат Результат;

КонецФункции // ()

Функция МожноОтправитьЗаявку(Заявка)  Экспорт
	
	Результат = Ложь;
	
	Пользователь =  Пользователи.ТекущийПользователь();
	
	
	Если Пользователи.РолиДоступны(Метаданные.Роли.ПолныеПрава.Имя,Пользователь) Тогда
		Возврат Истина;
	КонецЕсли ;
	
	
	
	Если  Пользователь = Заявка.Инициатор Тогда
		Результат = истина; 
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Вы не являетесть инициатором заявки");
		Результат = Ложь; 
	КонецЕсли; 
	
	
	
	Возврат Результат;

КонецФункции // ()


Функция ПолучитьЛимитыПоСтаьтиВЗаявке(Заявка) Экспорт 
	
	Результат = Новый Структура("Лимит,СуммаПоБюджету,СуммаВнеБюджета,Инфо",0,0,0,"");

	Лимит =   ПолучитьОстаткиЛимита( Заявка);
	
	Результат.Лимит = Лимит;
	
	ЛимитДоЗаявки = Лимит + ПолучитьСуммуЗаявки( Заявка.Ссылка);

	СуммаДокумента = Заявка.СуммаПлатежа;	
		                                                               
	Если ЛимитДоЗаявки >= СуммаДокумента Тогда
		Результат.СуммаПоБюджету = СуммаДокумента;
		Результат.СуммаВнеБюджета = 0;
	ИначеЕсли ЛимитДоЗаявки <= 0  Тогда 
		Результат.СуммаПоБюджету= 0;
		Результат.СуммаВнеБюджета = СуммаДокумента;	
	Иначе
		Результат.СуммаПоБюджету = СуммаДокумента- ЛимитДоЗаявки;
		Результат.СуммаВнеБюджета = ЛимитДоЗаявки;
		
	КонецЕсли; 
	

Текст = "";




ТзПлатеж = ПолучитьПлатежСтатьиБюджета(Заявка);

Если Не Значениезаполнено(Заявка.Основание) Тогда 
	
Текст = "Месячный БДДС не заполнено. Бюджет не известен или не существует! ";

ИначеЕсли ТзПлатеж.Количество()= 0 Тогда 
	
	Текст = "Платеж не запланирован  в календарных платежах месячного БДДС! ";

Иначе	                                                                        
	Платеж= ТзПлатеж[0];
	
	
Согласователь = Платеж.ТребованиеКСогласованию;
Если ЗначениеЗаполнено(Согласователь) тогда	
	Текст =  ?(ЗначениеЗаполнено(Текст), Текст+ ".  ", "") + "В бюджете утвержден согласователь для конкретной статьи";
КонецЕсли ;

Если  Результат.СуммаПоБюджету <=0  тогда
Текст = ?(ЗначениеЗаполнено(Текст), Текст+ ".  ", "")+ " Превышен лимит по бюджету или платеж вне бюджета";
 
КонецЕсли;

Список = ПолучитьСписокУтвержденныхПолучателейПлатажа(Заявка);  
Если Список.Количество()>0 Тогда

	Если Список.НайтиПоЗначению(Заявка.Получатель) = Неопределено Тогда
		
		Текст = ?(ЗначениеЗаполнено(Текст), Текст+ ".  ", "")+ " Получатель не утвержден в платеже бюджета ДДС";
		
	КонецЕсли;
	
КонецЕсли;	

КонецЕсли;


Результат.Инфо = Текст;

Возврат Результат;

КонецФункции // ()

Функция ПолучитьСписокУтвержденныхПолучателейПлатажа(Заявка)Экспорт
Список = Новый СписокЗначений;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_КалендарныеПлатежиПолучатели.Получатель КАК Получатель
		|ИЗ
		|	Документ._КалендарныеПлатежи.Получатели КАК _КалендарныеПлатежиПолучатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ._КалендарныеПлатежи.Платежи КАК _КалендарныеПлатежиПлатежи
		|		ПО _КалендарныеПлатежиПолучатели.Ключ = _КалендарныеПлатежиПлатежи.Ключ
		|ГДЕ
		|	_КалендарныеПлатежиПлатежи.Ссылка = &Ссылка
		|	И _КалендарныеПлатежиПлатежи.ЦФО = &ЦФО
		|	И _КалендарныеПлатежиПлатежи.СтатьяДДС = &СтатьяДДС
		|	И _КалендарныеПлатежиПлатежи.Инициатор = &Инициатор";
	
	Запрос.УстановитьПараметр("Инициатор", Заявка.Инициатор);
	Запрос.УстановитьПараметр("Ссылка", Заявка.Основание);
	Запрос.УстановитьПараметр("СтатьяДДС", Заявка.СтатьяДДС);
	Запрос.УстановитьПараметр("ЦФО", Заявка.ЦФО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Если  ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Получатель) Тогда	
	Список.Добавить(ВыборкаДетальныеЗаписи.Получатель);
    КонецЕсли;
	КонецЦикла;
	

Возврат Список;


КонецФункции



//////////////////////////////////////////////////////////////////////////////////
	 
Функция ПолучитьОстаткиЛимита( Заявка) Экспорт

	
	Лимит = 0; 
		Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	_ДвиженияДенежныхСредствОстатки.СуммаПлатежаОстаток КАК СуммаПлатежаОстаток
	               |ИЗ
	               |	РегистрНакопления._ДвиженияДенежныхСредств.Остатки(
	               |			,
	               |			КалендарныйПлатеж = &КалендарныйПлатеж
	               |				И СтатьяДДС в (&СтатьяДДС)
	               |				И ЦФО в (&ЦФО)
	               |				И Инициатор = &Инициатор) КАК _ДвиженияДенежныхСредствОстатки";
	
	ТаблицаЗаявки = Заявка.разбивкапостатьям.выгрузить(,"ЦФО,СтатьяДДС");
	Запрос.УстановитьПараметр("КалендарныйПлатеж", Заявка.Основание);
	Запрос.УстановитьПараметр("СтатьяДДС",ТаблицаЗаявки.ВыгрузитьКолонку("СтатьяДДС"));
	Запрос.УстановитьПараметр("ЦФО", ТаблицаЗаявки.ВыгрузитьКолонку("ЦФО"));
	Запрос.УстановитьПараметр("Инициатор", Заявка.Инициатор);


	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Лимит = ВыборкаДетальныеЗаписи.СуммаПлатежаОстаток; 
	КонецЦикла;
	
	 Возврат Лимит;


КонецФункции // ПолучитьОстаткиЛимита()

	 
Функция  ПолучитьСуммуЗаявки( Заявка) 

	
	Результат  = 0; 
	
		Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	_ДвиженияДенежныхСредств.СуммаПлатежа КАК СуммаПлатежа
	               |ИЗ
	               |	РегистрНакопления._ДвиженияДенежныхСредств КАК _ДвиженияДенежныхСредств
	               |ГДЕ
	               |	_ДвиженияДенежныхСредств.Регистратор = &Регистратор";
	
		
	Запрос.УстановитьПараметр("Регистратор", Заявка);



	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = ВыборкаДетальныеЗаписи.СуммаПлатежа; 
	КонецЦикла;
	
	 Возврат Результат;


КонецФункции 

Функция ПолучитьИнициаторСтатьиБюджета(Заявка) Экспорт 
	
	Инициатор = Справочники.Пользователи.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_КалендарныеПлатежиПлатежи.Инициатор КАК Инициатор
		|ИЗ
		|	Документ._КалендарныеПлатежи.Платежи КАК _КалендарныеПлатежиПлатежи
		|ГДЕ
		|	_КалендарныеПлатежиПлатежи.Ссылка = &Ссылка
		|	И _КалендарныеПлатежиПлатежи.СтатьяДДС = &СтатьяДДС";
	
	Запрос.УстановитьПараметр("Ссылка", Заявка.Основание);
	Запрос.УстановитьПараметр("СтатьяДДС", Заявка.СтатьяДДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Инициатор = ВыборкаДетальныеЗаписи.Инициатор;
	КонецЦикла;
	
	Возврат Инициатор; 


КонецФункции // ПолучитьИнициаторСтатьиБюджета()


Функция ПолучитьБухгалтерыОрганизации(Организация) Экспорт 
	
	Бухгалтеры = Новый Массив;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_БухгалтерыОрганизации.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений._БухгалтерыОрганизации КАК _БухгалтерыОрганизации
		|ГДЕ
		|	_БухгалтерыОрганизации.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Бухгалтеры.Добавить( ВыборкаДетальныеЗаписи.Пользователь);

	КонецЦикла;
	
	Возврат Бухгалтеры; 


КонецФункции // ПолучитьИнициаторСтатьиБюджета()


Функция ПолучитьСогласователиОрганизации(Организация)Экспорт

Список = Новый СписокЗначений;

Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_СогласователиОрганизации.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений._СогласователиОрганизации КАК _СогласователиОрганизации
		|ГДЕ
		|	_СогласователиОрганизации.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Список.Добавить(ВыборкаДетальныеЗаписи.Пользователь);
	КонецЦикла;
	


Возврат Список;
КонецФункции



Функция ПолучитьСогласовательСтатьиБюджета(Заявка) Экспорт 
	
	Согласователь = Справочники.Пользователи.ПустаяСсылка();
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	_КалендарныеПлатежиПлатежи.ТребованиеКСогласованию КАК ТребованиеКСогласованию
	//	|ИЗ
	//	|	Документ._КалендарныеПлатежи.Платежи КАК _КалендарныеПлатежиПлатежи
	//	|ГДЕ
	//	|	_КалендарныеПлатежиПлатежи.Ссылка = &Ссылка
	//	|	И _КалендарныеПлатежиПлатежи.СтатьяДДС = &СтатьяДДС";
	//
	//Запрос.УстановитьПараметр("Ссылка", Заявка.Основание);
	//Запрос.УстановитьПараметр("СтатьяДДС", Заявка.СтатьяДДС);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	Согласователь = ВыборкаДетальныеЗаписи.ТребованиеКСогласованию;

	//КонецЦикла;
	
	Возврат Согласователь; 


КонецФункции // ПолучитьИнициаторСтатьиБюджета()

//Контекст - Это заявка ссылка или заявка объект
Функция ПолучитьПлатежСтатьиБюджета(Контекст) Экспорт 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	              	|	_КалендарныеПлатежиПлатежи.Ссылка КАК Ссылка,
	              	|	_КалендарныеПлатежиПлатежи.Ссылка КАК КП,
	              	|	_КалендарныеПлатежиПлатежи.НомерСтроки КАК НомерСтроки,
	              	|	_КалендарныеПлатежиПлатежи.ДатаПлатежа КАК ДатаПлатежа,
	              	|	_КалендарныеПлатежиПлатежи.Получатель КАК Получатель,
	              	|	_КалендарныеПлатежиПлатежи.ЦФО КАК ЦФО,
	              	|	_КалендарныеПлатежиПлатежи.СтатьяДДС КАК СтатьяДДС,
	              	|	_КалендарныеПлатежиПлатежи.Примечание КАК Примечание,
	              	|	_КалендарныеПлатежиПлатежи.СуммаПлатежа КАК СуммаПлатежа,
	              	|	_КалендарныеПлатежиПлатежи.Инициатор КАК Инициатор,
	              	|	_КалендарныеПлатежиПлатежи.ТребованиеКСогласованию КАК ТребованиеКСогласованию,
	              	|	_КалендарныеПлатежиПлатежи.Ключ КАК Ключ,
	              	|	_КалендарныеПлатежиПлатежи.Ссылка.Плательщик КАК Плательщик
	              	|ИЗ
	              	|	Документ._КалендарныеПлатежи.Платежи КАК _КалендарныеПлатежиПлатежи
	              	|ГДЕ
	              	|	_КалендарныеПлатежиПлатежи.Ссылка = &Ссылка
	              	|	И _КалендарныеПлатежиПлатежи.СтатьяДДС В (&СтатьяДДС)
	              	|	И _КалендарныеПлатежиПлатежи.ЦФО В (&ЦФО)
	              	|	И _КалендарныеПлатежиПлатежи.Инициатор = &Инициатор";
	
	Запрос.УстановитьПараметр("Ссылка", Контекст.Основание);
	//////++НК	
	Запрос.УстановитьПараметр("СтатьяДДС", Контекст.Ссылка.разбивкапостатьям.выгрузитьколонку("СтатьяДДС"));
	Запрос.УстановитьПараметр("ЦФО", Контекст.ссылка.разбивкапостатьям.выгрузитьколонку("ЦФО"));	
	//////--НК
	Запрос.УстановитьПараметр("Инициатор", Контекст.Инициатор);
	
	возврат  Запрос.Выполнить().Выгрузить();
	

КонецФункции // ПолучитьИнициаторСтатьиБюджета()


Функция ПолучитьСписокПолучателейОрганизации(Организация) Экспорт

	  Список = Новый СписокЗначений;
	  
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_СогласователиОрганизации.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений._СогласователиОрганизации КАК _СогласователиОрганизации
		|ГДЕ
		|	_СогласователиОрганизации.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Список.Добавить(ВыборкаДетальныеЗаписи.Пользователь);	
			КонецЦикла;
	
	  Возврат Список;

КонецФункции  


Функция ПолучитьСписокПолучателейСтатьиБюджета(КП,СтатьяДДС) Экспорт

	  Список = Новый СписокЗначений;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_КалендарныеПлатежиПолучатели.Получатель КАК Получатель
		|ИЗ
		|	Документ._КалендарныеПлатежи.Получатели КАК _КалендарныеПлатежиПолучатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ._КалендарныеПлатежи.Платежи КАК _КалендарныеПлатежиПлатежи
		|		ПО (_КалендарныеПлатежиПлатежи.Ключ = _КалендарныеПлатежиПолучатели.Ключ)
		|ГДЕ
		|	_КалендарныеПлатежиПлатежи.Ссылка = &Ссылка
		|	И _КалендарныеПлатежиПлатежи.СтатьяДДС = &СтатьяДДС";
	
	Запрос.УстановитьПараметр("Ссылка", КП);
	Запрос.УстановитьПараметр("СтатьяДДС", СтатьяДДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Список.Добавить(ВыборкаДетальныеЗаписи.Получатель);	

	КонецЦикла;
	
	  
	  
	  
	  Возврат Список;

КонецФункции  


// Работа сообщеиями на сервере


// Отправляет сообщение почты или SMS на основании предмета по шаблону сообщения.
//
// Параметры:
//  Шаблон                   - СправочникСсылка.ШаблоныСообщений - ссылка на шаблон сообщения.
//  Предмет                  - Произвольный - объект основание для шаблона сообщений, типы объектов перечислены в
//                                            определяемом типе ПредметШаблонаСообщения.
//  УникальныйИдентификатор  - УникальныйИдентификатор - идентификатор формы, необходим для размещения вложений во
//                                                       временном хранилище.
//  ДополнительныеПараметры  - Структура - Необязательный, список дополнительных параметров, который будет передан в
//                                         параметр Сообщение в процедурах ПриФормированииСообщения при создании сообщения.
//     * ПреобразовыватьHTMLДляФорматированногоДокумента - Булево - необязательный, по умолчанию Ложь, определяет,
//                      необходимо ли преобразование HTML-текста сообщения, содержащего картинки в тексте письма, из-за
//                      особенностей вывода изображений в форматированном документе.
// 
// Возвращаемое значение:
//  Структура - результат отправки сообщения.
//   * Отправлено     - Булево - если Истина, то сообщение было успешно отправлено.
//   * ОписаниеОшибки - Строка - содержит описание ошибки, если письмо не было отправлено.
//
Функция  СформироватьСообщениеПоЗаявкеНасервере(Заявка,Контакт=Неопределено) Экспорт
											  
    ПараметрШаблона  = _ОбщийМодульВызовСервера.ПолучитьПараметрШаблонаНаСервере(Заявка);

    Предмет = Заявка;
	ВидСообщения = "Письмо";
	ПараметрыСообщения=  Новый Структура();
	ПараметрыСообщения.Вставить("ИмяФормыИсточникаСообщения","Документ._ЗаявкаНаОплату.Форма.ФормаДокумента");
	ПараметрыОтправки = ШаблоныСообщенийКлиентСервер.КонструкторПараметровОтправки(ПараметрШаблона.Шаблон, Предмет, ПараметрШаблона.УникальныйИдентификатор);
	ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения       = ВидСообщения;
	ПараметрыОтправки.ДополнительныеПараметры.ПараметрыСообщения = ПараметрыСообщения;

    ПараметрыОтправки.ДополнительныеПараметры.ПреобразовыватьHTMLДляФорматированногоДокумента = Истина;
	//\\++
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("Контакт",КОнтакт);
	//\\--
	
	Шаблон =ПараметрыОтправки.Шаблон;
	ДополнительныеПараметры =ПараметрыОтправки.ДополнительныеПараметры;
	Уид = ПараметрШаблона.УникальныйИдентификатор; 
	
	
	РезультатОтправки = ШаблоныСообщений.СформироватьСообщениеИОтправить(Шаблон,Предмет,Уид,ДополнительныеПараметры);
	
	Возврат РезультатОтправки;
	
	
КонецФункции


Функция СоздатьИсходящееПисьмоПриИзмененииСтатуса()  Экспорт

Возврат Константы._СоздатьИсходящееПисьмоПриИзмененииСтатуса.Получить();	

КонецФункции // ()
 

Функция ПолучитьПараметрШаблонаНаСервере(Заявка) Экспорт
ПараметрШаблона = Новый Структура("Шаблон, УникальныйИдентификатор");
ПараметрШаблона.Шаблон = Документы._ЗаявкаНаОплату.ПолучитьШаблон(Заявка);
ПараметрШаблона.УникальныйИдентификатор = Новый УникальныйИдентификатор;

Возврат ПараметрШаблона; 	

КонецФункции // ()

Функция СформироватьСообщениеНаСервере(АдресВременногоХранилища, ПараметрыОтправки, ВидСообщения) Экспорт
	
	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	ПараметрыВызоваСервера.Вставить("ВидСообщения",      ВидСообщения);
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
		ПараметрыОтправки.ДополнительныеПараметры.Вставить("РасширенныйСписокПолучателей", МодульВзаимодействия.ИспользуетсяПрочиеВзаимодействия());
	КонецЕсли;
	
	ШаблоныСообщенийСлужебный.СформироватьСообщениеВФоне(ПараметрыВызоваСервера, АдресВременногоХранилища);
	
	Возврат АдресВременногоХранилища;
	
КонецФункции

//++Гаранин
Функция СформироватьСообщениеНаСервереВторойСогласователь(АдресВременногоХранилища, ПараметрыОтправки, ВидСообщения) Экспорт
	
	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	ПараметрыВызоваСервера.Вставить("ВидСообщения",      ВидСообщения);
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
		ПараметрыОтправки.ДополнительныеПараметры.Вставить("РасширенныйСписокПолучателей", МодульВзаимодействия.ИспользуетсяПрочиеВзаимодействия());
	КонецЕсли;
	
	ШаблоныСообщенийСлужебный.СформироватьСообщениеВФонеВторойСогласователь(ПараметрыВызоваСервера, АдресВременногоХранилища);
	
	Возврат АдресВременногоХранилища;
	
КонецФункции
//--Гаранин

Функция ОтправитьПисьмоПриОткрытииПослеИзменениияСтатуса()Экспорт

Возврат Константы._ОтправитьПисьмоПриОткрытииПослеИзменениияСтатуса.Получить();	

КонецФункции // ()
//\\++
Процедура СделатьЗаписьВМониторинг(Заявка, ВебСервис, ТекстКомментария) Экспорт
	попытка
		нзапись = РегистрыСведений._МониторингУведомлений.СоздатьМенеджерЗаписи();
		нзапись.Период = текущаяДата();
		нзапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		нзапись.ВебСервис = ВебСервис;
		нзапись.Заявка = заявка;
		нзапись.Статус = Заявка.статус;
		нзапись.Комментарий = ТекстКомментария;
		нзапись.Записать();
	исключение
		ЗаписьЖурналаРегистрации("Запись в регистр мониторинга",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьСтруктуруПисемПриНесколькихСтатей(Заявка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	_ЗаявкаНаОплатуРазбивкаПоСтатьям.Согласователь КАК Согласователь,
	               |	_ЗаявкаНаОплатуРазбивкаПоСтатьям.ВторойСогласователь КАК ВторойСогласователь,
	               |	_ЗаявкаНаОплатуРазбивкаПоСтатьям.ПервыйСогласовал КАК ПервыйСогласовал,
	               |	_ЗаявкаНаОплатуРазбивкаПоСтатьям.ВторойСогласовал КАК ВторойСогласовал
	               |ПОМЕСТИТЬ ВременнаяТаблица
	               |ИЗ
	               |	Документ._ЗаявкаНаОплату.РазбивкаПоСтатьям КАК _ЗаявкаНаОплатуРазбивкаПоСтатьям
	               |ГДЕ
	               |	_ЗаявкаНаОплатуРазбивкаПоСтатьям.Ссылка = &Заявка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	_ЗаявкаНаОплатуРазбивкаПоСтатьям.Согласователь,
	               |	_ЗаявкаНаОплатуРазбивкаПоСтатьям.ВторойСогласователь,
	               |	_ЗаявкаНаОплатуРазбивкаПоСтатьям.ПервыйСогласовал,
	               |	_ЗаявкаНаОплатуРазбивкаПоСтатьям.ВторойСогласовал
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА НЕ ВременнаяТаблица.ПервыйСогласовал
	               |			ТОГДА ВременнаяТаблица.Согласователь
	               |		ИНАЧЕ ВременнаяТаблица.ВторойСогласователь
	               |	КОНЕЦ КАК Согласователь
	               |ИЗ
	               |	ВременнаяТаблица КАК ВременнаяТаблица";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	МассивКонтактов = новый массив;
	Пока выборка.Следующий() цикл
		Если ЗначениеЗаполнено(выборка.согласователь) тогда
			МассивКонтактов.Добавить(выборка.согласователь);
		КонецЕсли;
	КонецЦикла;
	возврат массивконтактов;
	
КонецФункции
Функция СообщитьКоличествоСтрокВТаблице(Заявка) экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(_ЗаявкаНаОплатуРазбивкаПоСтатьям.Ссылка) КАК КоличествоСтрок
	|ИЗ
	|	Документ._ЗаявкаНаОплату.РазбивкаПоСтатьям КАК _ЗаявкаНаОплатуРазбивкаПоСтатьям
	|ГДЕ
	|	_ЗаявкаНаОплатуРазбивкаПоСтатьям.Ссылка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() тогда
	
		возврат Выборка.КоличествоСтрок;
	
	КонецЕсли;
	возврат 0;
КонецФункции

//BSP-1
&НаСервере
Функция ПолучитьТаблицуЭтаповОплат(ОсновнаяЗаявкаСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_ЗаявкаНаОплату.Ссылка КАК Заявка,
		|	_ЗаявкаНаОплату.ДатаОплаты КАК ДатаОплаты,
		|	_ЗаявкаНаОплату.СуммаПлатежа КАК СуммаПлатежа,
		|	_ЗаявкаНаОплату.Статус КАК Статус
		|ИЗ
		|	Документ._ЗаявкаНаОплату КАК _ЗаявкаНаОплату
		|ГДЕ
		|	(_ЗаявкаНаОплату.ОсновнаяЗаявка = &ОсновнаяЗаявка
		|			ИЛИ _ЗаявкаНаОплату.Ссылка = &ОсновнаяЗаявка)
		|	И _ЗаявкаНаОплату.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	_ЗаявкаНаОплату.ДатаОплаты";
	
	Запрос.УстановитьПараметр("ОсновнаяЗаявка", ОсновнаяЗаявкаСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции